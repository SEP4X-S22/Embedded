
SEP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  000026ae  00002742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ea9  0080021a  0080021a  0000275c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000278c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a8  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007499  00000000  00000000  00002d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cda  00000000  00000000  0000a20d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ca9  00000000  00000000  0000bee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001580  00000000  00000000  0000fb90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025f1  00000000  00000000  00011110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f4c  00000000  00000000  00013701  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  0001a64d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
       2:	00 00       	nop
       4:	b2 c0       	rjmp	.+356    	; 0x16a <__bad_interrupt>
       6:	00 00       	nop
       8:	b0 c0       	rjmp	.+352    	; 0x16a <__bad_interrupt>
       a:	00 00       	nop
       c:	ae c0       	rjmp	.+348    	; 0x16a <__bad_interrupt>
       e:	00 00       	nop
      10:	ac c0       	rjmp	.+344    	; 0x16a <__bad_interrupt>
      12:	00 00       	nop
      14:	aa c0       	rjmp	.+340    	; 0x16a <__bad_interrupt>
      16:	00 00       	nop
      18:	a8 c0       	rjmp	.+336    	; 0x16a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a6 c0       	rjmp	.+332    	; 0x16a <__bad_interrupt>
      1e:	00 00       	nop
      20:	a4 c0       	rjmp	.+328    	; 0x16a <__bad_interrupt>
      22:	00 00       	nop
      24:	a2 c0       	rjmp	.+324    	; 0x16a <__bad_interrupt>
      26:	00 00       	nop
      28:	a0 c0       	rjmp	.+320    	; 0x16a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9e c0       	rjmp	.+316    	; 0x16a <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c3       	rjmp	.+1806   	; 0x740 <__vector_12>
      32:	00 00       	nop
      34:	9a c0       	rjmp	.+308    	; 0x16a <__bad_interrupt>
      36:	00 00       	nop
      38:	98 c0       	rjmp	.+304    	; 0x16a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	96 c0       	rjmp	.+300    	; 0x16a <__bad_interrupt>
      3e:	00 00       	nop
      40:	94 c0       	rjmp	.+296    	; 0x16a <__bad_interrupt>
      42:	00 00       	nop
      44:	92 c0       	rjmp	.+292    	; 0x16a <__bad_interrupt>
      46:	00 00       	nop
      48:	90 c0       	rjmp	.+288    	; 0x16a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8e c0       	rjmp	.+284    	; 0x16a <__bad_interrupt>
      4e:	00 00       	nop
      50:	8c c0       	rjmp	.+280    	; 0x16a <__bad_interrupt>
      52:	00 00       	nop
      54:	8a c0       	rjmp	.+276    	; 0x16a <__bad_interrupt>
      56:	00 00       	nop
      58:	88 c0       	rjmp	.+272    	; 0x16a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	86 c0       	rjmp	.+268    	; 0x16a <__bad_interrupt>
      5e:	00 00       	nop
      60:	84 c0       	rjmp	.+264    	; 0x16a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__vector_25>
      68:	0c 94 37 11 	jmp	0x226e	; 0x226e <__vector_26>
      6c:	7e c0       	rjmp	.+252    	; 0x16a <__bad_interrupt>
      6e:	00 00       	nop
      70:	7c c0       	rjmp	.+248    	; 0x16a <__bad_interrupt>
      72:	00 00       	nop
      74:	7a c0       	rjmp	.+244    	; 0x16a <__bad_interrupt>
      76:	00 00       	nop
      78:	78 c0       	rjmp	.+240    	; 0x16a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	76 c0       	rjmp	.+236    	; 0x16a <__bad_interrupt>
      7e:	00 00       	nop
      80:	74 c0       	rjmp	.+232    	; 0x16a <__bad_interrupt>
      82:	00 00       	nop
      84:	72 c0       	rjmp	.+228    	; 0x16a <__bad_interrupt>
      86:	00 00       	nop
      88:	70 c0       	rjmp	.+224    	; 0x16a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6e c0       	rjmp	.+220    	; 0x16a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__vector_36>
      94:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__vector_37>
      98:	68 c0       	rjmp	.+208    	; 0x16a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	66 c0       	rjmp	.+204    	; 0x16a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	64 c0       	rjmp	.+200    	; 0x16a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	62 c0       	rjmp	.+196    	; 0x16a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	60 c0       	rjmp	.+192    	; 0x16a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5e c0       	rjmp	.+188    	; 0x16a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5c c0       	rjmp	.+184    	; 0x16a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5a c0       	rjmp	.+180    	; 0x16a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	58 c0       	rjmp	.+176    	; 0x16a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	56 c0       	rjmp	.+172    	; 0x16a <__bad_interrupt>
      be:	00 00       	nop
      c0:	54 c0       	rjmp	.+168    	; 0x16a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	52 c0       	rjmp	.+164    	; 0x16a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	50 c0       	rjmp	.+160    	; 0x16a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__vector_51>
      d0:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__vector_52>
      d4:	4a c0       	rjmp	.+148    	; 0x16a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__vector_54>
      dc:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__vector_55>
      e0:	44 c0       	rjmp	.+136    	; 0x16a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f2 0f       	add	r31, r18
      e6:	f2 0f       	add	r31, r18
      e8:	f2 0f       	add	r31, r18
      ea:	29 10       	cpse	r2, r9
      ec:	31 10       	cpse	r3, r1
      ee:	46 10       	cpse	r4, r6
      f0:	f2 0f       	add	r31, r18
      f2:	f2 0f       	add	r31, r18
      f4:	29 10       	cpse	r2, r9
      f6:	31 10       	cpse	r3, r1

000000f8 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
      f8:	30 d7       	rcall	.+3680   	; 0xf5a <prvCheckTasksWaitingTermination>
      fa:	80 91 27 10 	lds	r24, 0x1027	; 0x801027 <pxReadyTasksLists>
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	08 f0       	brcs	.+2      	; 0x104 <prvIdleTask+0xc>
     102:	5a d2       	rcall	.+1204   	; 0x5b8 <vPortYield>
     104:	0e 94 6f 10 	call	0x20de	; 0x20de <vApplicationIdleHook>
     108:	f7 cf       	rjmp	.-18     	; 0xf8 <prvIdleTask>

0000010a <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	1f 92       	push	r1
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	ce 01       	movw	r24, r28
     116:	01 96       	adiw	r24, 0x01	; 1
     118:	0e 94 76 0d 	call	0x1aec	; 0x1aec <prvGetNextExpireTime>
     11c:	49 81       	ldd	r20, Y+1	; 0x01
     11e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <prvProcessTimerOrBlockTask>
     122:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <prvProcessReceivedCommands>
     126:	f6 cf       	rjmp	.-20     	; 0x114 <prvTimerTask+0xa>

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf ef       	ldi	r28, 0xFF	; 255
     12e:	d1 e2       	ldi	r29, 0x21	; 33
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61
     134:	00 e0       	ldi	r16, 0x00	; 0
     136:	0c bf       	out	0x3c, r16	; 60

00000138 <__do_copy_data>:
     138:	12 e0       	ldi	r17, 0x02	; 2
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	ee ea       	ldi	r30, 0xAE	; 174
     140:	f6 e2       	ldi	r31, 0x26	; 38
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	aa 31       	cpi	r26, 0x1A	; 26
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	20 e1       	ldi	r18, 0x10	; 16
     154:	aa e1       	ldi	r26, 0x1A	; 26
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	a3 3c       	cpi	r26, 0xC3	; 195
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <main>
     166:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <_exit>

0000016a <__bad_interrupt>:
     16a:	4a cf       	rjmp	.-364    	; 0x0 <__vectors>

0000016c <trace_init>:
 #include <avr/io.h>
 #include <FreeRTOSConfig.h>
 #include "FreeRTOSTraceDriver.h"

 void trace_init(void)
 {
     16c:	08 95       	ret

0000016e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     16e:	e6 e2       	ldi	r30, 0x26	; 38
     170:	f2 e0       	ldi	r31, 0x02	; 2
     172:	aa e2       	ldi	r26, 0x2A	; 42
     174:	b2 e0       	ldi	r27, 0x02	; 2
     176:	b1 83       	std	Z+1, r27	; 0x01
     178:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     17a:	13 82       	std	Z+3, r1	; 0x03
     17c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     17e:	e2 ed       	ldi	r30, 0xD2	; 210
     180:	ff e0       	ldi	r31, 0x0F	; 15
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     182:	f0 93 25 02 	sts	0x0225, r31	; 0x800225 <pxEnd+0x1>
     186:	e0 93 24 02 	sts	0x0224, r30	; 0x800224 <pxEnd>
    pxEnd->xBlockSize = 0;
     18a:	13 82       	std	Z+3, r1	; 0x03
     18c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     18e:	11 82       	std	Z+1, r1	; 0x01
     190:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     192:	88 ea       	ldi	r24, 0xA8	; 168
     194:	9d e0       	ldi	r25, 0x0D	; 13
     196:	13 96       	adiw	r26, 0x03	; 3
     198:	9c 93       	st	X, r25
     19a:	8e 93       	st	-X, r24
     19c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     19e:	ed 93       	st	X+, r30
     1a0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1a2:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <xMinimumEverFreeBytesRemaining+0x1>
     1a6:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1aa:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <xFreeBytesRemaining+0x1>
     1ae:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e8       	ldi	r25, 0x80	; 128
     1b6:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <__data_end+0x1>
     1ba:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
     1be:	08 95       	ret

000001c0 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     1c6:	a6 e2       	ldi	r26, 0x26	; 38
     1c8:	b2 e0       	ldi	r27, 0x02	; 2
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <prvInsertBlockIntoFreeList+0xe>
     1cc:	df 01       	movw	r26, r30
     1ce:	ed 91       	ld	r30, X+
     1d0:	fc 91       	ld	r31, X
     1d2:	11 97       	sbiw	r26, 0x01	; 1
     1d4:	ec 17       	cp	r30, r28
     1d6:	fd 07       	cpc	r31, r29
     1d8:	c8 f3       	brcs	.-14     	; 0x1cc <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     1da:	12 96       	adiw	r26, 0x02	; 2
     1dc:	8d 91       	ld	r24, X+
     1de:	9c 91       	ld	r25, X
     1e0:	13 97       	sbiw	r26, 0x03	; 3
     1e2:	9d 01       	movw	r18, r26
     1e4:	28 0f       	add	r18, r24
     1e6:	39 1f       	adc	r19, r25
     1e8:	c2 17       	cp	r28, r18
     1ea:	d3 07       	cpc	r29, r19
     1ec:	49 f4       	brne	.+18     	; 0x200 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     1ee:	2a 81       	ldd	r18, Y+2	; 0x02
     1f0:	3b 81       	ldd	r19, Y+3	; 0x03
     1f2:	82 0f       	add	r24, r18
     1f4:	93 1f       	adc	r25, r19
     1f6:	13 96       	adiw	r26, 0x03	; 3
     1f8:	9c 93       	st	X, r25
     1fa:	8e 93       	st	-X, r24
     1fc:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     1fe:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     200:	8a 81       	ldd	r24, Y+2	; 0x02
     202:	9b 81       	ldd	r25, Y+3	; 0x03
     204:	9e 01       	movw	r18, r28
     206:	28 0f       	add	r18, r24
     208:	39 1f       	adc	r19, r25
     20a:	e2 17       	cp	r30, r18
     20c:	f3 07       	cpc	r31, r19
     20e:	c1 f4       	brne	.+48     	; 0x240 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     210:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <pxEnd>
     214:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <pxEnd+0x1>
     218:	e2 17       	cp	r30, r18
     21a:	f3 07       	cpc	r31, r19
     21c:	71 f0       	breq	.+28     	; 0x23a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     21e:	22 81       	ldd	r18, Z+2	; 0x02
     220:	33 81       	ldd	r19, Z+3	; 0x03
     222:	82 0f       	add	r24, r18
     224:	93 1f       	adc	r25, r19
     226:	9b 83       	std	Y+3, r25	; 0x03
     228:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     22a:	ed 91       	ld	r30, X+
     22c:	fc 91       	ld	r31, X
     22e:	11 97       	sbiw	r26, 0x01	; 1
     230:	80 81       	ld	r24, Z
     232:	91 81       	ldd	r25, Z+1	; 0x01
     234:	99 83       	std	Y+1, r25	; 0x01
     236:	88 83       	st	Y, r24
     238:	05 c0       	rjmp	.+10     	; 0x244 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     23a:	39 83       	std	Y+1, r19	; 0x01
     23c:	28 83       	st	Y, r18
     23e:	02 c0       	rjmp	.+4      	; 0x244 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     240:	f9 83       	std	Y+1, r31	; 0x01
     242:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     244:	ca 17       	cp	r28, r26
     246:	db 07       	cpc	r29, r27
     248:	11 f0       	breq	.+4      	; 0x24e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     24a:	cd 93       	st	X+, r28
     24c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     262:	bd d7       	rcall	.+3962   	; 0x11de <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     264:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <pxEnd>
     268:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <pxEnd+0x1>
     26c:	89 2b       	or	r24, r25
     26e:	09 f4       	brne	.+2      	; 0x272 <pvPortMalloc+0x1e>
        {
            prvHeapInit();
     270:	7e df       	rcall	.-260    	; 0x16e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     272:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
     276:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__data_end+0x1>
     27a:	80 23       	and	r24, r16
     27c:	91 23       	and	r25, r17
     27e:	89 2b       	or	r24, r25
     280:	09 f0       	breq	.+2      	; 0x284 <pvPortMalloc+0x30>
     282:	76 c0       	rjmp	.+236    	; 0x370 <pvPortMalloc+0x11c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     284:	01 15       	cp	r16, r1
     286:	11 05       	cpc	r17, r1
     288:	49 f0       	breq	.+18     	; 0x29c <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     28a:	c8 01       	movw	r24, r16
     28c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     28e:	08 17       	cp	r16, r24
     290:	19 07       	cpc	r17, r25
     292:	18 f0       	brcs	.+6      	; 0x29a <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	10 e0       	ldi	r17, 0x00	; 0
     298:	01 c0       	rjmp	.+2      	; 0x29c <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     29a:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     29c:	01 15       	cp	r16, r1
     29e:	11 05       	cpc	r17, r1
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <pvPortMalloc+0x50>
     2a2:	69 c0       	rjmp	.+210    	; 0x376 <pvPortMalloc+0x122>
     2a4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <xFreeBytesRemaining>
     2a8:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <xFreeBytesRemaining+0x1>
     2ac:	80 17       	cp	r24, r16
     2ae:	91 07       	cpc	r25, r17
     2b0:	08 f4       	brcc	.+2      	; 0x2b4 <pvPortMalloc+0x60>
     2b2:	64 c0       	rjmp	.+200    	; 0x37c <pvPortMalloc+0x128>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     2b4:	c0 91 26 02 	lds	r28, 0x0226	; 0x800226 <xStart>
     2b8:	d0 91 27 02 	lds	r29, 0x0227	; 0x800227 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     2bc:	e6 e2       	ldi	r30, 0x26	; 38
     2be:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     2c2:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     2c4:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2c6:	8a 81       	ldd	r24, Y+2	; 0x02
     2c8:	9b 81       	ldd	r25, Y+3	; 0x03
     2ca:	80 17       	cp	r24, r16
     2cc:	91 07       	cpc	r25, r17
     2ce:	20 f4       	brcc	.+8      	; 0x2d8 <pvPortMalloc+0x84>
     2d0:	88 81       	ld	r24, Y
     2d2:	99 81       	ldd	r25, Y+1	; 0x01
     2d4:	00 97       	sbiw	r24, 0x00	; 0
     2d6:	a9 f7       	brne	.-22     	; 0x2c2 <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     2d8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <pxEnd>
     2dc:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <pxEnd+0x1>
     2e0:	c8 17       	cp	r28, r24
     2e2:	d9 07       	cpc	r29, r25
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <pvPortMalloc+0x94>
     2e6:	4d c0       	rjmp	.+154    	; 0x382 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     2e8:	e0 80       	ld	r14, Z
     2ea:	f1 80       	ldd	r15, Z+1	; 0x01
     2ec:	84 e0       	ldi	r24, 0x04	; 4
     2ee:	e8 0e       	add	r14, r24
     2f0:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     2f2:	88 81       	ld	r24, Y
     2f4:	99 81       	ldd	r25, Y+1	; 0x01
     2f6:	91 83       	std	Z+1, r25	; 0x01
     2f8:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     2fa:	2a 81       	ldd	r18, Y+2	; 0x02
     2fc:	3b 81       	ldd	r19, Y+3	; 0x03
     2fe:	20 1b       	sub	r18, r16
     300:	31 0b       	sbc	r19, r17
     302:	29 30       	cpi	r18, 0x09	; 9
     304:	31 05       	cpc	r19, r1
     306:	48 f0       	brcs	.+18     	; 0x31a <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     308:	ce 01       	movw	r24, r28
     30a:	80 0f       	add	r24, r16
     30c:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     30e:	fc 01       	movw	r30, r24
     310:	33 83       	std	Z+3, r19	; 0x03
     312:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     314:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     316:	0a 83       	std	Y+2, r16	; 0x02
     318:	53 df       	rcall	.-346    	; 0x1c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     31a:	2a 81       	ldd	r18, Y+2	; 0x02
     31c:	3b 81       	ldd	r19, Y+3	; 0x03
     31e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <xFreeBytesRemaining>
     322:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <xFreeBytesRemaining+0x1>
     326:	82 1b       	sub	r24, r18
     328:	93 0b       	sbc	r25, r19
     32a:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <xFreeBytesRemaining+0x1>
     32e:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     332:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <xMinimumEverFreeBytesRemaining>
     336:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <xMinimumEverFreeBytesRemaining+0x1>
     33a:	84 17       	cp	r24, r20
     33c:	95 07       	cpc	r25, r21
     33e:	20 f4       	brcc	.+8      	; 0x348 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     340:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <xMinimumEverFreeBytesRemaining+0x1>
     344:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     348:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
     34c:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__data_end+0x1>
     350:	28 2b       	or	r18, r24
     352:	39 2b       	or	r19, r25
     354:	3b 83       	std	Y+3, r19	; 0x03
     356:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     358:	19 82       	std	Y+1, r1	; 0x01
     35a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     35c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <xNumberOfSuccessfulAllocations>
     360:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <xNumberOfSuccessfulAllocations+0x1>
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <xNumberOfSuccessfulAllocations+0x1>
     36a:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <xNumberOfSuccessfulAllocations>
     36e:	0b c0       	rjmp	.+22     	; 0x386 <pvPortMalloc+0x132>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     370:	e1 2c       	mov	r14, r1
     372:	f1 2c       	mov	r15, r1
     374:	08 c0       	rjmp	.+16     	; 0x386 <pvPortMalloc+0x132>
     376:	e1 2c       	mov	r14, r1
     378:	f1 2c       	mov	r15, r1
     37a:	05 c0       	rjmp	.+10     	; 0x386 <pvPortMalloc+0x132>
     37c:	e1 2c       	mov	r14, r1
     37e:	f1 2c       	mov	r15, r1
     380:	02 c0       	rjmp	.+4      	; 0x386 <pvPortMalloc+0x132>
     382:	e1 2c       	mov	r14, r1
     384:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     386:	0e 94 2f 0a 	call	0x145e	; 0x145e <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     38a:	e1 14       	cp	r14, r1
     38c:	f1 04       	cpc	r15, r1
     38e:	11 f4       	brne	.+4      	; 0x394 <pvPortMalloc+0x140>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     390:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     394:	c7 01       	movw	r24, r14
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	08 95       	ret

000003a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	89 f1       	breq	.+98     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     3b0:	ec 01       	movw	r28, r24
     3b2:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     3b4:	4a 81       	ldd	r20, Y+2	; 0x02
     3b6:	5b 81       	ldd	r21, Y+3	; 0x03
     3b8:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__data_end>
     3bc:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__data_end+0x1>
     3c0:	ba 01       	movw	r22, r20
     3c2:	62 23       	and	r22, r18
     3c4:	73 23       	and	r23, r19
     3c6:	67 2b       	or	r22, r23
     3c8:	21 f1       	breq	.+72     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     3ca:	68 81       	ld	r22, Y
     3cc:	79 81       	ldd	r23, Y+1	; 0x01
     3ce:	67 2b       	or	r22, r23
     3d0:	01 f5       	brne	.+64     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     3d2:	20 95       	com	r18
     3d4:	30 95       	com	r19
     3d6:	24 23       	and	r18, r20
     3d8:	35 23       	and	r19, r21
     3da:	3b 83       	std	Y+3, r19	; 0x03
     3dc:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     3de:	ff d6       	rcall	.+3582   	; 0x11de <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	9b 81       	ldd	r25, Y+3	; 0x03
     3e4:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <xFreeBytesRemaining>
     3e8:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <xFreeBytesRemaining+0x1>
     3ec:	82 0f       	add	r24, r18
     3ee:	93 1f       	adc	r25, r19
     3f0:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <xFreeBytesRemaining+0x1>
     3f4:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     3f8:	ce 01       	movw	r24, r28
     3fa:	e2 de       	rcall	.-572    	; 0x1c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     3fc:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <xNumberOfSuccessfulFrees>
     400:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <xNumberOfSuccessfulFrees+0x1>
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <xNumberOfSuccessfulFrees+0x1>
     40a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     40e:	0e 94 2f 0a 	call	0x145e	; 0x145e <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     41c:	fc 01       	movw	r30, r24
     41e:	03 96       	adiw	r24, 0x03	; 3
     420:	92 83       	std	Z+2, r25	; 0x02
     422:	81 83       	std	Z+1, r24	; 0x01
     424:	4f ef       	ldi	r20, 0xFF	; 255
     426:	5f ef       	ldi	r21, 0xFF	; 255
     428:	ba 01       	movw	r22, r20
     42a:	43 83       	std	Z+3, r20	; 0x03
     42c:	54 83       	std	Z+4, r21	; 0x04
     42e:	65 83       	std	Z+5, r22	; 0x05
     430:	76 83       	std	Z+6, r23	; 0x06
     432:	90 87       	std	Z+8, r25	; 0x08
     434:	87 83       	std	Z+7, r24	; 0x07
     436:	92 87       	std	Z+10, r25	; 0x0a
     438:	81 87       	std	Z+9, r24	; 0x09
     43a:	10 82       	st	Z, r1
     43c:	08 95       	ret

0000043e <vListInitialiseItem>:
     43e:	fc 01       	movw	r30, r24
     440:	13 86       	std	Z+11, r1	; 0x0b
     442:	12 86       	std	Z+10, r1	; 0x0a
     444:	08 95       	ret

00000446 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     450:	08 81       	ld	r16, Y
     452:	19 81       	ldd	r17, Y+1	; 0x01
     454:	2a 81       	ldd	r18, Y+2	; 0x02
     456:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     458:	0f 3f       	cpi	r16, 0xFF	; 255
     45a:	4f ef       	ldi	r20, 0xFF	; 255
     45c:	14 07       	cpc	r17, r20
     45e:	24 07       	cpc	r18, r20
     460:	34 07       	cpc	r19, r20
     462:	21 f4       	brne	.+8      	; 0x46c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     464:	fc 01       	movw	r30, r24
     466:	a1 85       	ldd	r26, Z+9	; 0x09
     468:	b2 85       	ldd	r27, Z+10	; 0x0a
     46a:	11 c0       	rjmp	.+34     	; 0x48e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     46c:	dc 01       	movw	r26, r24
     46e:	13 96       	adiw	r26, 0x03	; 3
     470:	01 c0       	rjmp	.+2      	; 0x474 <vListInsert+0x2e>
     472:	df 01       	movw	r26, r30
     474:	14 96       	adiw	r26, 0x04	; 4
     476:	ed 91       	ld	r30, X+
     478:	fc 91       	ld	r31, X
     47a:	15 97       	sbiw	r26, 0x05	; 5
     47c:	40 81       	ld	r20, Z
     47e:	51 81       	ldd	r21, Z+1	; 0x01
     480:	62 81       	ldd	r22, Z+2	; 0x02
     482:	73 81       	ldd	r23, Z+3	; 0x03
     484:	04 17       	cp	r16, r20
     486:	15 07       	cpc	r17, r21
     488:	26 07       	cpc	r18, r22
     48a:	37 07       	cpc	r19, r23
     48c:	90 f7       	brcc	.-28     	; 0x472 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     48e:	14 96       	adiw	r26, 0x04	; 4
     490:	ed 91       	ld	r30, X+
     492:	fc 91       	ld	r31, X
     494:	15 97       	sbiw	r26, 0x05	; 5
     496:	fd 83       	std	Y+5, r31	; 0x05
     498:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     49a:	d7 83       	std	Z+7, r29	; 0x07
     49c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     49e:	bf 83       	std	Y+7, r27	; 0x07
     4a0:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     4a2:	15 96       	adiw	r26, 0x05	; 5
     4a4:	dc 93       	st	X, r29
     4a6:	ce 93       	st	-X, r28
     4a8:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     4aa:	9b 87       	std	Y+11, r25	; 0x0b
     4ac:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 81       	ld	r18, Z
     4b2:	2f 5f       	subi	r18, 0xFF	; 255
     4b4:	20 83       	st	Z, r18
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret

000004c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     4c6:	a2 85       	ldd	r26, Z+10	; 0x0a
     4c8:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4ca:	c4 81       	ldd	r28, Z+4	; 0x04
     4cc:	d5 81       	ldd	r29, Z+5	; 0x05
     4ce:	86 81       	ldd	r24, Z+6	; 0x06
     4d0:	97 81       	ldd	r25, Z+7	; 0x07
     4d2:	9f 83       	std	Y+7, r25	; 0x07
     4d4:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4d6:	c6 81       	ldd	r28, Z+6	; 0x06
     4d8:	d7 81       	ldd	r29, Z+7	; 0x07
     4da:	84 81       	ldd	r24, Z+4	; 0x04
     4dc:	95 81       	ldd	r25, Z+5	; 0x05
     4de:	9d 83       	std	Y+5, r25	; 0x05
     4e0:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     4e2:	11 96       	adiw	r26, 0x01	; 1
     4e4:	8d 91       	ld	r24, X+
     4e6:	9c 91       	ld	r25, X
     4e8:	12 97       	sbiw	r26, 0x02	; 2
     4ea:	e8 17       	cp	r30, r24
     4ec:	f9 07       	cpc	r31, r25
     4ee:	31 f4       	brne	.+12     	; 0x4fc <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     4f0:	86 81       	ldd	r24, Z+6	; 0x06
     4f2:	97 81       	ldd	r25, Z+7	; 0x07
     4f4:	12 96       	adiw	r26, 0x02	; 2
     4f6:	9c 93       	st	X, r25
     4f8:	8e 93       	st	-X, r24
     4fa:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     4fc:	13 86       	std	Z+11, r1	; 0x0b
     4fe:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     500:	8c 91       	ld	r24, X
     502:	81 50       	subi	r24, 0x01	; 1
     504:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     506:	8c 91       	ld	r24, X
}
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     50e:	a8 95       	wdr
     510:	90 ec       	ldi	r25, 0xC0	; 192
     512:	88 e1       	ldi	r24, 0x18	; 24
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	a8 95       	wdr
     51a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     51e:	0f be       	out	0x3f, r0	; 63
     520:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     524:	08 95       	ret

00000526 <pxPortInitialiseStack>:
     526:	fc 01       	movw	r30, r24
     528:	60 83       	st	Z, r22
     52a:	31 97       	sbiw	r30, 0x01	; 1
     52c:	70 83       	st	Z, r23
     52e:	31 97       	sbiw	r30, 0x01	; 1
     530:	10 82       	st	Z, r1
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	10 82       	st	Z, r1
     536:	31 97       	sbiw	r30, 0x01	; 1
     538:	20 e8       	ldi	r18, 0x80	; 128
     53a:	20 83       	st	Z, r18
     53c:	31 97       	sbiw	r30, 0x01	; 1
     53e:	10 82       	st	Z, r1
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	10 82       	st	Z, r1
     544:	31 97       	sbiw	r30, 0x01	; 1
     546:	10 82       	st	Z, r1
     548:	77 97       	sbiw	r30, 0x17	; 23
     54a:	40 83       	st	Z, r20
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	50 83       	st	Z, r21
     550:	86 97       	sbiw	r24, 0x26	; 38
     552:	08 95       	ret

00000554 <xPortStartScheduler>:
     554:	dc df       	rcall	.-72     	; 0x50e <prvSetupTimerInterrupt>
     556:	a0 91 95 10 	lds	r26, 0x1095	; 0x801095 <pxCurrentTCB>
     55a:	b0 91 96 10 	lds	r27, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
     55e:	cd 91       	ld	r28, X+
     560:	cd bf       	out	0x3d, r28	; 61
     562:	dd 91       	ld	r29, X+
     564:	de bf       	out	0x3e, r29	; 62
     566:	ff 91       	pop	r31
     568:	ef 91       	pop	r30
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	bf 91       	pop	r27
     570:	af 91       	pop	r26
     572:	9f 91       	pop	r25
     574:	8f 91       	pop	r24
     576:	7f 91       	pop	r23
     578:	6f 91       	pop	r22
     57a:	5f 91       	pop	r21
     57c:	4f 91       	pop	r20
     57e:	3f 91       	pop	r19
     580:	2f 91       	pop	r18
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	df 90       	pop	r13
     58c:	cf 90       	pop	r12
     58e:	bf 90       	pop	r11
     590:	af 90       	pop	r10
     592:	9f 90       	pop	r9
     594:	8f 90       	pop	r8
     596:	7f 90       	pop	r7
     598:	6f 90       	pop	r6
     59a:	5f 90       	pop	r5
     59c:	4f 90       	pop	r4
     59e:	3f 90       	pop	r3
     5a0:	2f 90       	pop	r2
     5a2:	1f 90       	pop	r1
     5a4:	0f 90       	pop	r0
     5a6:	0c be       	out	0x3c, r0	; 60
     5a8:	0f 90       	pop	r0
     5aa:	0b be       	out	0x3b, r0	; 59
     5ac:	0f 90       	pop	r0
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	0f 90       	pop	r0
     5b2:	08 95       	ret
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	08 95       	ret

000005b8 <vPortYield>:
     5b8:	0f 92       	push	r0
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	0f 92       	push	r0
     5c0:	0b b6       	in	r0, 0x3b	; 59
     5c2:	0f 92       	push	r0
     5c4:	0c b6       	in	r0, 0x3c	; 60
     5c6:	0f 92       	push	r0
     5c8:	1f 92       	push	r1
     5ca:	11 24       	eor	r1, r1
     5cc:	2f 92       	push	r2
     5ce:	3f 92       	push	r3
     5d0:	4f 92       	push	r4
     5d2:	5f 92       	push	r5
     5d4:	6f 92       	push	r6
     5d6:	7f 92       	push	r7
     5d8:	8f 92       	push	r8
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ef 93       	push	r30
     606:	ff 93       	push	r31
     608:	a0 91 95 10 	lds	r26, 0x1095	; 0x801095 <pxCurrentTCB>
     60c:	b0 91 96 10 	lds	r27, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
     610:	0d b6       	in	r0, 0x3d	; 61
     612:	0d 92       	st	X+, r0
     614:	0e b6       	in	r0, 0x3e	; 62
     616:	0d 92       	st	X+, r0
     618:	0e 94 26 0b 	call	0x164c	; 0x164c <vTaskSwitchContext>
     61c:	a0 91 95 10 	lds	r26, 0x1095	; 0x801095 <pxCurrentTCB>
     620:	b0 91 96 10 	lds	r27, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
     624:	cd 91       	ld	r28, X+
     626:	cd bf       	out	0x3d, r28	; 61
     628:	dd 91       	ld	r29, X+
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	ff 91       	pop	r31
     62e:	ef 91       	pop	r30
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	bf 91       	pop	r27
     636:	af 91       	pop	r26
     638:	9f 91       	pop	r25
     63a:	8f 91       	pop	r24
     63c:	7f 91       	pop	r23
     63e:	6f 91       	pop	r22
     640:	5f 91       	pop	r21
     642:	4f 91       	pop	r20
     644:	3f 91       	pop	r19
     646:	2f 91       	pop	r18
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	af 90       	pop	r10
     658:	9f 90       	pop	r9
     65a:	8f 90       	pop	r8
     65c:	7f 90       	pop	r7
     65e:	6f 90       	pop	r6
     660:	5f 90       	pop	r5
     662:	4f 90       	pop	r4
     664:	3f 90       	pop	r3
     666:	2f 90       	pop	r2
     668:	1f 90       	pop	r1
     66a:	0f 90       	pop	r0
     66c:	0c be       	out	0x3c, r0	; 60
     66e:	0f 90       	pop	r0
     670:	0b be       	out	0x3b, r0	; 59
     672:	0f 90       	pop	r0
     674:	0f be       	out	0x3f, r0	; 63
     676:	0f 90       	pop	r0
     678:	08 95       	ret

0000067a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	0f 92       	push	r0
     682:	0b b6       	in	r0, 0x3b	; 59
     684:	0f 92       	push	r0
     686:	0c b6       	in	r0, 0x3c	; 60
     688:	0f 92       	push	r0
     68a:	1f 92       	push	r1
     68c:	11 24       	eor	r1, r1
     68e:	2f 92       	push	r2
     690:	3f 92       	push	r3
     692:	4f 92       	push	r4
     694:	5f 92       	push	r5
     696:	6f 92       	push	r6
     698:	7f 92       	push	r7
     69a:	8f 92       	push	r8
     69c:	9f 92       	push	r9
     69e:	af 92       	push	r10
     6a0:	bf 92       	push	r11
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	2f 93       	push	r18
     6b0:	3f 93       	push	r19
     6b2:	4f 93       	push	r20
     6b4:	5f 93       	push	r21
     6b6:	6f 93       	push	r22
     6b8:	7f 93       	push	r23
     6ba:	8f 93       	push	r24
     6bc:	9f 93       	push	r25
     6be:	af 93       	push	r26
     6c0:	bf 93       	push	r27
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	ef 93       	push	r30
     6c8:	ff 93       	push	r31
     6ca:	a0 91 95 10 	lds	r26, 0x1095	; 0x801095 <pxCurrentTCB>
     6ce:	b0 91 96 10 	lds	r27, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
     6d2:	0d b6       	in	r0, 0x3d	; 61
     6d4:	0d 92       	st	X+, r0
     6d6:	0e b6       	in	r0, 0x3e	; 62
     6d8:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     6da:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     6dc:	94 d5       	rcall	.+2856   	; 0x1206 <xTaskIncrementTick>
     6de:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     6e0:	b5 d7       	rcall	.+3946   	; 0x164c <vTaskSwitchContext>
     6e2:	a0 91 95 10 	lds	r26, 0x1095	; 0x801095 <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     6e6:	b0 91 96 10 	lds	r27, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
     6ea:	cd 91       	ld	r28, X+
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	dd 91       	ld	r29, X+
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	ff 91       	pop	r31
     6f4:	ef 91       	pop	r30
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	bf 91       	pop	r27
     6fc:	af 91       	pop	r26
     6fe:	9f 91       	pop	r25
     700:	8f 91       	pop	r24
     702:	7f 91       	pop	r23
     704:	6f 91       	pop	r22
     706:	5f 91       	pop	r21
     708:	4f 91       	pop	r20
     70a:	3f 91       	pop	r19
     70c:	2f 91       	pop	r18
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	bf 90       	pop	r11
     71c:	af 90       	pop	r10
     71e:	9f 90       	pop	r9
     720:	8f 90       	pop	r8
     722:	7f 90       	pop	r7
     724:	6f 90       	pop	r6
     726:	5f 90       	pop	r5
     728:	4f 90       	pop	r4
     72a:	3f 90       	pop	r3
     72c:	2f 90       	pop	r2
     72e:	1f 90       	pop	r1
     730:	0f 90       	pop	r0
     732:	0c be       	out	0x3c, r0	; 60
     734:	0f 90       	pop	r0
     736:	0b be       	out	0x3b, r0	; 59
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	08 95       	ret

00000740 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     740:	9c df       	rcall	.-200    	; 0x67a <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     742:	18 95       	reti

00000744 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	0f 92       	push	r0
     74a:	fc 01       	movw	r30, r24
     74c:	86 8d       	ldd	r24, Z+30	; 0x1e
     74e:	81 11       	cpse	r24, r1
     750:	02 c0       	rjmp	.+4      	; 0x756 <prvIsQueueEmpty+0x12>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	01 c0       	rjmp	.+2      	; 0x758 <prvIsQueueEmpty+0x14>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0f 90       	pop	r0
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	08 95       	ret

0000075e <prvIsQueueFull>:
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	0f 92       	push	r0
     764:	fc 01       	movw	r30, r24
     766:	26 8d       	ldd	r18, Z+30	; 0x1e
     768:	87 8d       	ldd	r24, Z+31	; 0x1f
     76a:	28 13       	cpse	r18, r24
     76c:	02 c0       	rjmp	.+4      	; 0x772 <prvIsQueueFull+0x14>
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	01 c0       	rjmp	.+2      	; 0x774 <prvIsQueueFull+0x16>
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	08 95       	ret

0000077a <prvCopyDataToQueue>:
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	ec 01       	movw	r28, r24
     784:	04 2f       	mov	r16, r20
     786:	1e 8d       	ldd	r17, Y+30	; 0x1e
     788:	48 a1       	ldd	r20, Y+32	; 0x20
     78a:	41 11       	cpse	r20, r1
     78c:	0c c0       	rjmp	.+24     	; 0x7a6 <prvCopyDataToQueue+0x2c>
     78e:	88 81       	ld	r24, Y
     790:	99 81       	ldd	r25, Y+1	; 0x01
     792:	89 2b       	or	r24, r25
     794:	09 f0       	breq	.+2      	; 0x798 <prvCopyDataToQueue+0x1e>
     796:	42 c0       	rjmp	.+132    	; 0x81c <prvCopyDataToQueue+0xa2>
     798:	8c 81       	ldd	r24, Y+4	; 0x04
     79a:	9d 81       	ldd	r25, Y+5	; 0x05
     79c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xTaskPriorityDisinherit>
     7a0:	1d 82       	std	Y+5, r1	; 0x05
     7a2:	1c 82       	std	Y+4, r1	; 0x04
     7a4:	42 c0       	rjmp	.+132    	; 0x82a <prvCopyDataToQueue+0xb0>
     7a6:	01 11       	cpse	r16, r1
     7a8:	17 c0       	rjmp	.+46     	; 0x7d8 <prvCopyDataToQueue+0x5e>
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	9b 81       	ldd	r25, Y+3	; 0x03
     7b0:	0e 94 45 13 	call	0x268a	; 0x268a <memcpy>
     7b4:	28 a1       	ldd	r18, Y+32	; 0x20
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ba:	82 0f       	add	r24, r18
     7bc:	91 1d       	adc	r25, r1
     7be:	9b 83       	std	Y+3, r25	; 0x03
     7c0:	8a 83       	std	Y+2, r24	; 0x02
     7c2:	2c 81       	ldd	r18, Y+4	; 0x04
     7c4:	3d 81       	ldd	r19, Y+5	; 0x05
     7c6:	82 17       	cp	r24, r18
     7c8:	93 07       	cpc	r25, r19
     7ca:	50 f1       	brcs	.+84     	; 0x820 <prvCopyDataToQueue+0xa6>
     7cc:	88 81       	ld	r24, Y
     7ce:	99 81       	ldd	r25, Y+1	; 0x01
     7d0:	9b 83       	std	Y+3, r25	; 0x03
     7d2:	8a 83       	std	Y+2, r24	; 0x02
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	29 c0       	rjmp	.+82     	; 0x82a <prvCopyDataToQueue+0xb0>
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	8e 81       	ldd	r24, Y+6	; 0x06
     7dc:	9f 81       	ldd	r25, Y+7	; 0x07
     7de:	0e 94 45 13 	call	0x268a	; 0x268a <memcpy>
     7e2:	88 a1       	ldd	r24, Y+32	; 0x20
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	91 95       	neg	r25
     7e8:	81 95       	neg	r24
     7ea:	91 09       	sbc	r25, r1
     7ec:	2e 81       	ldd	r18, Y+6	; 0x06
     7ee:	3f 81       	ldd	r19, Y+7	; 0x07
     7f0:	28 0f       	add	r18, r24
     7f2:	39 1f       	adc	r19, r25
     7f4:	3f 83       	std	Y+7, r19	; 0x07
     7f6:	2e 83       	std	Y+6, r18	; 0x06
     7f8:	48 81       	ld	r20, Y
     7fa:	59 81       	ldd	r21, Y+1	; 0x01
     7fc:	24 17       	cp	r18, r20
     7fe:	35 07       	cpc	r19, r21
     800:	30 f4       	brcc	.+12     	; 0x80e <prvCopyDataToQueue+0x94>
     802:	2c 81       	ldd	r18, Y+4	; 0x04
     804:	3d 81       	ldd	r19, Y+5	; 0x05
     806:	82 0f       	add	r24, r18
     808:	93 1f       	adc	r25, r19
     80a:	9f 83       	std	Y+7, r25	; 0x07
     80c:	8e 83       	std	Y+6, r24	; 0x06
     80e:	02 30       	cpi	r16, 0x02	; 2
     810:	49 f4       	brne	.+18     	; 0x824 <prvCopyDataToQueue+0xaa>
     812:	11 23       	and	r17, r17
     814:	49 f0       	breq	.+18     	; 0x828 <prvCopyDataToQueue+0xae>
     816:	11 50       	subi	r17, 0x01	; 1
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	07 c0       	rjmp	.+14     	; 0x82a <prvCopyDataToQueue+0xb0>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	05 c0       	rjmp	.+10     	; 0x82a <prvCopyDataToQueue+0xb0>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	03 c0       	rjmp	.+6      	; 0x82a <prvCopyDataToQueue+0xb0>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	01 c0       	rjmp	.+2      	; 0x82a <prvCopyDataToQueue+0xb0>
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	1f 5f       	subi	r17, 0xFF	; 255
     82c:	1e 8f       	std	Y+30, r17	; 0x1e
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	08 95       	ret

00000838 <prvCopyDataFromQueue>:
     838:	fc 01       	movw	r30, r24
     83a:	40 a1       	ldd	r20, Z+32	; 0x20
     83c:	44 23       	and	r20, r20
     83e:	a9 f0       	breq	.+42     	; 0x86a <prvCopyDataFromQueue+0x32>
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	26 81       	ldd	r18, Z+6	; 0x06
     844:	37 81       	ldd	r19, Z+7	; 0x07
     846:	24 0f       	add	r18, r20
     848:	35 1f       	adc	r19, r21
     84a:	37 83       	std	Z+7, r19	; 0x07
     84c:	26 83       	std	Z+6, r18	; 0x06
     84e:	84 81       	ldd	r24, Z+4	; 0x04
     850:	95 81       	ldd	r25, Z+5	; 0x05
     852:	28 17       	cp	r18, r24
     854:	39 07       	cpc	r19, r25
     856:	20 f0       	brcs	.+8      	; 0x860 <prvCopyDataFromQueue+0x28>
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	97 83       	std	Z+7, r25	; 0x07
     85e:	86 83       	std	Z+6, r24	; 0x06
     860:	cb 01       	movw	r24, r22
     862:	66 81       	ldd	r22, Z+6	; 0x06
     864:	77 81       	ldd	r23, Z+7	; 0x07
     866:	0c 94 45 13 	jmp	0x268a	; 0x268a <memcpy>
     86a:	08 95       	ret

0000086c <prvUnlockQueue>:
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	0f 92       	push	r0
     87a:	1a a1       	ldd	r17, Y+34	; 0x22
     87c:	0a c0       	rjmp	.+20     	; 0x892 <prvUnlockQueue+0x26>
     87e:	8b 89       	ldd	r24, Y+19	; 0x13
     880:	88 23       	and	r24, r24
     882:	49 f0       	breq	.+18     	; 0x896 <prvUnlockQueue+0x2a>
     884:	ce 01       	movw	r24, r28
     886:	43 96       	adiw	r24, 0x13	; 19
     888:	9e d7       	rcall	.+3900   	; 0x17c6 <xTaskRemoveFromEventList>
     88a:	81 11       	cpse	r24, r1
     88c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vTaskMissedYield>
     890:	11 50       	subi	r17, 0x01	; 1
     892:	11 16       	cp	r1, r17
     894:	a4 f3       	brlt	.-24     	; 0x87e <prvUnlockQueue+0x12>
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	8a a3       	std	Y+34, r24	; 0x22
     89a:	0f 90       	pop	r0
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	0f 92       	push	r0
     8a4:	19 a1       	ldd	r17, Y+33	; 0x21
     8a6:	0a c0       	rjmp	.+20     	; 0x8bc <prvUnlockQueue+0x50>
     8a8:	88 85       	ldd	r24, Y+8	; 0x08
     8aa:	88 23       	and	r24, r24
     8ac:	49 f0       	breq	.+18     	; 0x8c0 <prvUnlockQueue+0x54>
     8ae:	ce 01       	movw	r24, r28
     8b0:	08 96       	adiw	r24, 0x08	; 8
     8b2:	89 d7       	rcall	.+3858   	; 0x17c6 <xTaskRemoveFromEventList>
     8b4:	81 11       	cpse	r24, r1
     8b6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vTaskMissedYield>
     8ba:	11 50       	subi	r17, 0x01	; 1
     8bc:	11 16       	cp	r1, r17
     8be:	a4 f3       	brlt	.-24     	; 0x8a8 <prvUnlockQueue+0x3c>
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	89 a3       	std	Y+33, r24	; 0x21
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	08 95       	ret

000008d0 <xQueueGenericReset>:
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ec 01       	movw	r28, r24
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	0f 92       	push	r0
     8dc:	e8 81       	ld	r30, Y
     8de:	f9 81       	ldd	r31, Y+1	; 0x01
     8e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8e2:	28 a1       	ldd	r18, Y+32	; 0x20
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	82 9f       	mul	r24, r18
     8ea:	a0 01       	movw	r20, r0
     8ec:	83 9f       	mul	r24, r19
     8ee:	50 0d       	add	r21, r0
     8f0:	92 9f       	mul	r25, r18
     8f2:	50 0d       	add	r21, r0
     8f4:	11 24       	eor	r1, r1
     8f6:	4e 0f       	add	r20, r30
     8f8:	5f 1f       	adc	r21, r31
     8fa:	5d 83       	std	Y+5, r21	; 0x05
     8fc:	4c 83       	std	Y+4, r20	; 0x04
     8fe:	1e 8e       	std	Y+30, r1	; 0x1e
     900:	fb 83       	std	Y+3, r31	; 0x03
     902:	ea 83       	std	Y+2, r30	; 0x02
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	28 9f       	mul	r18, r24
     908:	a0 01       	movw	r20, r0
     90a:	29 9f       	mul	r18, r25
     90c:	50 0d       	add	r21, r0
     90e:	38 9f       	mul	r19, r24
     910:	50 0d       	add	r21, r0
     912:	11 24       	eor	r1, r1
     914:	cf 01       	movw	r24, r30
     916:	84 0f       	add	r24, r20
     918:	95 1f       	adc	r25, r21
     91a:	9f 83       	std	Y+7, r25	; 0x07
     91c:	8e 83       	std	Y+6, r24	; 0x06
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	89 a3       	std	Y+33, r24	; 0x21
     922:	8a a3       	std	Y+34, r24	; 0x22
     924:	61 11       	cpse	r22, r1
     926:	0a c0       	rjmp	.+20     	; 0x93c <xQueueGenericReset+0x6c>
     928:	88 85       	ldd	r24, Y+8	; 0x08
     92a:	88 23       	and	r24, r24
     92c:	69 f0       	breq	.+26     	; 0x948 <xQueueGenericReset+0x78>
     92e:	ce 01       	movw	r24, r28
     930:	08 96       	adiw	r24, 0x08	; 8
     932:	49 d7       	rcall	.+3730   	; 0x17c6 <xTaskRemoveFromEventList>
     934:	88 23       	and	r24, r24
     936:	41 f0       	breq	.+16     	; 0x948 <xQueueGenericReset+0x78>
     938:	3f de       	rcall	.-898    	; 0x5b8 <vPortYield>
     93a:	06 c0       	rjmp	.+12     	; 0x948 <xQueueGenericReset+0x78>
     93c:	ce 01       	movw	r24, r28
     93e:	08 96       	adiw	r24, 0x08	; 8
     940:	6d dd       	rcall	.-1318   	; 0x41c <vListInitialise>
     942:	ce 01       	movw	r24, r28
     944:	43 96       	adiw	r24, 0x13	; 19
     946:	6a dd       	rcall	.-1324   	; 0x41c <vListInitialise>
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <prvInitialiseNewQueue>:
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	f8 01       	movw	r30, r16
     95a:	61 11       	cpse	r22, r1
     95c:	03 c0       	rjmp	.+6      	; 0x964 <prvInitialiseNewQueue+0x10>
     95e:	11 83       	std	Z+1, r17	; 0x01
     960:	00 83       	st	Z, r16
     962:	02 c0       	rjmp	.+4      	; 0x968 <prvInitialiseNewQueue+0x14>
     964:	51 83       	std	Z+1, r21	; 0x01
     966:	40 83       	st	Z, r20
     968:	87 8f       	std	Z+31, r24	; 0x1f
     96a:	60 a3       	std	Z+32, r22	; 0x20
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	cf 01       	movw	r24, r30
     970:	af df       	rcall	.-162    	; 0x8d0 <xQueueGenericReset>
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	08 95       	ret

00000978 <xQueueGenericCreate>:
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	f8 2e       	mov	r15, r24
     988:	e6 2e       	mov	r14, r22
     98a:	d4 2e       	mov	r13, r20
     98c:	86 9f       	mul	r24, r22
     98e:	c0 01       	movw	r24, r0
     990:	11 24       	eor	r1, r1
     992:	83 96       	adiw	r24, 0x23	; 35
     994:	5f dc       	rcall	.-1858   	; 0x254 <pvPortMalloc>
     996:	ec 01       	movw	r28, r24
     998:	00 97       	sbiw	r24, 0x00	; 0
     99a:	41 f0       	breq	.+16     	; 0x9ac <xQueueGenericCreate+0x34>
     99c:	8c 01       	movw	r16, r24
     99e:	2d 2d       	mov	r18, r13
     9a0:	ac 01       	movw	r20, r24
     9a2:	4d 5d       	subi	r20, 0xDD	; 221
     9a4:	5f 4f       	sbci	r21, 0xFF	; 255
     9a6:	6e 2d       	mov	r22, r14
     9a8:	8f 2d       	mov	r24, r15
     9aa:	d4 df       	rcall	.-88     	; 0x954 <prvInitialiseNewQueue>
     9ac:	ce 01       	movw	r24, r28
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	08 95       	ret

000009be <xQueueGenericSend>:
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	29 97       	sbiw	r28, 0x09	; 9
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	7c 01       	movw	r14, r24
     9e0:	6b 01       	movw	r12, r22
     9e2:	2e 83       	std	Y+6, r18	; 0x06
     9e4:	3f 83       	std	Y+7, r19	; 0x07
     9e6:	48 87       	std	Y+8, r20	; 0x08
     9e8:	59 87       	std	Y+9, r21	; 0x09
     9ea:	10 e0       	ldi	r17, 0x00	; 0
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	0f 92       	push	r0
     9f2:	f7 01       	movw	r30, r14
     9f4:	96 8d       	ldd	r25, Z+30	; 0x1e
     9f6:	87 8d       	ldd	r24, Z+31	; 0x1f
     9f8:	98 17       	cp	r25, r24
     9fa:	10 f0       	brcs	.+4      	; 0xa00 <xQueueGenericSend+0x42>
     9fc:	02 30       	cpi	r16, 0x02	; 2
     9fe:	a9 f4       	brne	.+42     	; 0xa2a <xQueueGenericSend+0x6c>
     a00:	40 2f       	mov	r20, r16
     a02:	b6 01       	movw	r22, r12
     a04:	c7 01       	movw	r24, r14
     a06:	b9 de       	rcall	.-654    	; 0x77a <prvCopyDataToQueue>
     a08:	f7 01       	movw	r30, r14
     a0a:	93 89       	ldd	r25, Z+19	; 0x13
     a0c:	99 23       	and	r25, r25
     a0e:	39 f0       	breq	.+14     	; 0xa1e <xQueueGenericSend+0x60>
     a10:	c7 01       	movw	r24, r14
     a12:	43 96       	adiw	r24, 0x13	; 19
     a14:	d8 d6       	rcall	.+3504   	; 0x17c6 <xTaskRemoveFromEventList>
     a16:	88 23       	and	r24, r24
     a18:	21 f0       	breq	.+8      	; 0xa22 <xQueueGenericSend+0x64>
     a1a:	ce dd       	rcall	.-1124   	; 0x5b8 <vPortYield>
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <xQueueGenericSend+0x64>
     a1e:	81 11       	cpse	r24, r1
     a20:	cb dd       	rcall	.-1130   	; 0x5b8 <vPortYield>
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	46 c0       	rjmp	.+140    	; 0xab6 <xQueueGenericSend+0xf8>
     a2a:	8e 81       	ldd	r24, Y+6	; 0x06
     a2c:	9f 81       	ldd	r25, Y+7	; 0x07
     a2e:	a8 85       	ldd	r26, Y+8	; 0x08
     a30:	b9 85       	ldd	r27, Y+9	; 0x09
     a32:	89 2b       	or	r24, r25
     a34:	8a 2b       	or	r24, r26
     a36:	8b 2b       	or	r24, r27
     a38:	21 f4       	brne	.+8      	; 0xa42 <xQueueGenericSend+0x84>
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	3a c0       	rjmp	.+116    	; 0xab6 <xQueueGenericSend+0xf8>
     a42:	11 11       	cpse	r17, r1
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <xQueueGenericSend+0x90>
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	6c d7       	rcall	.+3800   	; 0x1924 <vTaskInternalSetTimeOutState>
     a4c:	11 e0       	ldi	r17, 0x01	; 1
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	c5 d3       	rcall	.+1930   	; 0x11de <vTaskSuspendAll>
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	0f 92       	push	r0
     a5a:	f7 01       	movw	r30, r14
     a5c:	81 a1       	ldd	r24, Z+33	; 0x21
     a5e:	8f 3f       	cpi	r24, 0xFF	; 255
     a60:	09 f4       	brne	.+2      	; 0xa64 <xQueueGenericSend+0xa6>
     a62:	11 a2       	std	Z+33, r1	; 0x21
     a64:	f7 01       	movw	r30, r14
     a66:	82 a1       	ldd	r24, Z+34	; 0x22
     a68:	8f 3f       	cpi	r24, 0xFF	; 255
     a6a:	09 f4       	brne	.+2      	; 0xa6e <xQueueGenericSend+0xb0>
     a6c:	12 a2       	std	Z+34, r1	; 0x22
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	be 01       	movw	r22, r28
     a74:	6a 5f       	subi	r22, 0xFA	; 250
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	64 d7       	rcall	.+3784   	; 0x1946 <xTaskCheckForTimeOut>
     a7e:	81 11       	cpse	r24, r1
     a80:	16 c0       	rjmp	.+44     	; 0xaae <xQueueGenericSend+0xf0>
     a82:	c7 01       	movw	r24, r14
     a84:	6c de       	rcall	.-808    	; 0x75e <prvIsQueueFull>
     a86:	88 23       	and	r24, r24
     a88:	71 f0       	breq	.+28     	; 0xaa6 <xQueueGenericSend+0xe8>
     a8a:	4e 81       	ldd	r20, Y+6	; 0x06
     a8c:	5f 81       	ldd	r21, Y+7	; 0x07
     a8e:	68 85       	ldd	r22, Y+8	; 0x08
     a90:	79 85       	ldd	r23, Y+9	; 0x09
     a92:	c7 01       	movw	r24, r14
     a94:	08 96       	adiw	r24, 0x08	; 8
     a96:	3e d6       	rcall	.+3196   	; 0x1714 <vTaskPlaceOnEventList>
     a98:	c7 01       	movw	r24, r14
     a9a:	e8 de       	rcall	.-560    	; 0x86c <prvUnlockQueue>
     a9c:	e0 d4       	rcall	.+2496   	; 0x145e <xTaskResumeAll>
     a9e:	81 11       	cpse	r24, r1
     aa0:	a5 cf       	rjmp	.-182    	; 0x9ec <xQueueGenericSend+0x2e>
     aa2:	8a dd       	rcall	.-1260   	; 0x5b8 <vPortYield>
     aa4:	a3 cf       	rjmp	.-186    	; 0x9ec <xQueueGenericSend+0x2e>
     aa6:	c7 01       	movw	r24, r14
     aa8:	e1 de       	rcall	.-574    	; 0x86c <prvUnlockQueue>
     aaa:	d9 d4       	rcall	.+2482   	; 0x145e <xTaskResumeAll>
     aac:	9f cf       	rjmp	.-194    	; 0x9ec <xQueueGenericSend+0x2e>
     aae:	c7 01       	movw	r24, r14
     ab0:	dd de       	rcall	.-582    	; 0x86c <prvUnlockQueue>
     ab2:	d5 d4       	rcall	.+2474   	; 0x145e <xTaskResumeAll>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	29 96       	adiw	r28, 0x09	; 9
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	08 95       	ret

00000ad4 <prvInitialiseMutex>:
     ad4:	0f 93       	push	r16
     ad6:	00 97       	sbiw	r24, 0x00	; 0
     ad8:	69 f0       	breq	.+26     	; 0xaf4 <prvInitialiseMutex+0x20>
     ada:	fc 01       	movw	r30, r24
     adc:	15 82       	std	Z+5, r1	; 0x05
     ade:	14 82       	std	Z+4, r1	; 0x04
     ae0:	11 82       	std	Z+1, r1	; 0x01
     ae2:	10 82       	st	Z, r1
     ae4:	16 82       	std	Z+6, r1	; 0x06
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	a9 01       	movw	r20, r18
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	65 df       	rcall	.-310    	; 0x9be <xQueueGenericSend>
     af4:	0f 91       	pop	r16
     af6:	08 95       	ret

00000af8 <xQueueCreateMutex>:
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	48 2f       	mov	r20, r24
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	3a df       	rcall	.-396    	; 0x978 <xQueueGenericCreate>
     b04:	ec 01       	movw	r28, r24
     b06:	e6 df       	rcall	.-52     	; 0xad4 <prvInitialiseMutex>
     b08:	ce 01       	movw	r24, r28
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <xQueueGenericSendFromISR>:
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	8a 01       	movw	r16, r20
     b1e:	fc 01       	movw	r30, r24
     b20:	56 8d       	ldd	r21, Z+30	; 0x1e
     b22:	37 8d       	ldd	r19, Z+31	; 0x1f
     b24:	53 17       	cp	r21, r19
     b26:	10 f0       	brcs	.+4      	; 0xb2c <xQueueGenericSendFromISR+0x1c>
     b28:	22 30       	cpi	r18, 0x02	; 2
     b2a:	f1 f4       	brne	.+60     	; 0xb68 <xQueueGenericSendFromISR+0x58>
     b2c:	42 2f       	mov	r20, r18
     b2e:	78 01       	movw	r14, r16
     b30:	ec 01       	movw	r28, r24
     b32:	1a a1       	ldd	r17, Y+34	; 0x22
     b34:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b36:	ce 01       	movw	r24, r28
     b38:	20 de       	rcall	.-960    	; 0x77a <prvCopyDataToQueue>
     b3a:	1f 3f       	cpi	r17, 0xFF	; 255
     b3c:	79 f4       	brne	.+30     	; 0xb5c <xQueueGenericSendFromISR+0x4c>
     b3e:	8b 89       	ldd	r24, Y+19	; 0x13
     b40:	88 23       	and	r24, r24
     b42:	a1 f0       	breq	.+40     	; 0xb6c <xQueueGenericSendFromISR+0x5c>
     b44:	ce 01       	movw	r24, r28
     b46:	43 96       	adiw	r24, 0x13	; 19
     b48:	3e d6       	rcall	.+3196   	; 0x17c6 <xTaskRemoveFromEventList>
     b4a:	88 23       	and	r24, r24
     b4c:	89 f0       	breq	.+34     	; 0xb70 <xQueueGenericSendFromISR+0x60>
     b4e:	e1 14       	cp	r14, r1
     b50:	f1 04       	cpc	r15, r1
     b52:	81 f0       	breq	.+32     	; 0xb74 <xQueueGenericSendFromISR+0x64>
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	f7 01       	movw	r30, r14
     b58:	80 83       	st	Z, r24
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <xQueueGenericSendFromISR+0x66>
     b5c:	ff 24       	eor	r15, r15
     b5e:	f3 94       	inc	r15
     b60:	f1 0e       	add	r15, r17
     b62:	fa a2       	std	Y+34, r15	; 0x22
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	07 c0       	rjmp	.+14     	; 0xb76 <xQueueGenericSendFromISR+0x66>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <xQueueGenericSendFromISR+0x66>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	03 c0       	rjmp	.+6      	; 0xb76 <xQueueGenericSendFromISR+0x66>
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <xQueueGenericSendFromISR+0x66>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	08 95       	ret

00000b84 <xQueueReceive>:
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	29 97       	sbiw	r28, 0x09	; 9
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	8c 01       	movw	r16, r24
     ba6:	6b 01       	movw	r12, r22
     ba8:	2e 83       	std	Y+6, r18	; 0x06
     baa:	3f 83       	std	Y+7, r19	; 0x07
     bac:	48 87       	std	Y+8, r20	; 0x08
     bae:	59 87       	std	Y+9, r21	; 0x09
     bb0:	e1 2c       	mov	r14, r1
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	0f 92       	push	r0
     bb8:	f8 01       	movw	r30, r16
     bba:	f6 8c       	ldd	r15, Z+30	; 0x1e
     bbc:	ff 20       	and	r15, r15
     bbe:	91 f0       	breq	.+36     	; 0xbe4 <xQueueReceive+0x60>
     bc0:	b6 01       	movw	r22, r12
     bc2:	c8 01       	movw	r24, r16
     bc4:	39 de       	rcall	.-910    	; 0x838 <prvCopyDataFromQueue>
     bc6:	fa 94       	dec	r15
     bc8:	f8 01       	movw	r30, r16
     bca:	f6 8e       	std	Z+30, r15	; 0x1e
     bcc:	80 85       	ldd	r24, Z+8	; 0x08
     bce:	88 23       	and	r24, r24
     bd0:	29 f0       	breq	.+10     	; 0xbdc <xQueueReceive+0x58>
     bd2:	c8 01       	movw	r24, r16
     bd4:	08 96       	adiw	r24, 0x08	; 8
     bd6:	f7 d5       	rcall	.+3054   	; 0x17c6 <xTaskRemoveFromEventList>
     bd8:	81 11       	cpse	r24, r1
     bda:	ee dc       	rcall	.-1572   	; 0x5b8 <vPortYield>
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	4c c0       	rjmp	.+152    	; 0xc7c <xQueueReceive+0xf8>
     be4:	8e 81       	ldd	r24, Y+6	; 0x06
     be6:	9f 81       	ldd	r25, Y+7	; 0x07
     be8:	a8 85       	ldd	r26, Y+8	; 0x08
     bea:	b9 85       	ldd	r27, Y+9	; 0x09
     bec:	89 2b       	or	r24, r25
     bee:	8a 2b       	or	r24, r26
     bf0:	8b 2b       	or	r24, r27
     bf2:	21 f4       	brne	.+8      	; 0xbfc <xQueueReceive+0x78>
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	40 c0       	rjmp	.+128    	; 0xc7c <xQueueReceive+0xf8>
     bfc:	e1 10       	cpse	r14, r1
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <xQueueReceive+0x86>
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	8f d6       	rcall	.+3358   	; 0x1924 <vTaskInternalSetTimeOutState>
     c06:	ee 24       	eor	r14, r14
     c08:	e3 94       	inc	r14
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	e7 d2       	rcall	.+1486   	; 0x11de <vTaskSuspendAll>
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	0f 92       	push	r0
     c16:	f8 01       	movw	r30, r16
     c18:	81 a1       	ldd	r24, Z+33	; 0x21
     c1a:	8f 3f       	cpi	r24, 0xFF	; 255
     c1c:	09 f4       	brne	.+2      	; 0xc20 <xQueueReceive+0x9c>
     c1e:	11 a2       	std	Z+33, r1	; 0x21
     c20:	f8 01       	movw	r30, r16
     c22:	82 a1       	ldd	r24, Z+34	; 0x22
     c24:	8f 3f       	cpi	r24, 0xFF	; 255
     c26:	09 f4       	brne	.+2      	; 0xc2a <xQueueReceive+0xa6>
     c28:	12 a2       	std	Z+34, r1	; 0x22
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	be 01       	movw	r22, r28
     c30:	6a 5f       	subi	r22, 0xFA	; 250
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	86 d6       	rcall	.+3340   	; 0x1946 <xTaskCheckForTimeOut>
     c3a:	81 11       	cpse	r24, r1
     c3c:	16 c0       	rjmp	.+44     	; 0xc6a <xQueueReceive+0xe6>
     c3e:	c8 01       	movw	r24, r16
     c40:	81 dd       	rcall	.-1278   	; 0x744 <prvIsQueueEmpty>
     c42:	88 23       	and	r24, r24
     c44:	71 f0       	breq	.+28     	; 0xc62 <xQueueReceive+0xde>
     c46:	4e 81       	ldd	r20, Y+6	; 0x06
     c48:	5f 81       	ldd	r21, Y+7	; 0x07
     c4a:	68 85       	ldd	r22, Y+8	; 0x08
     c4c:	79 85       	ldd	r23, Y+9	; 0x09
     c4e:	c8 01       	movw	r24, r16
     c50:	43 96       	adiw	r24, 0x13	; 19
     c52:	60 d5       	rcall	.+2752   	; 0x1714 <vTaskPlaceOnEventList>
     c54:	c8 01       	movw	r24, r16
     c56:	0a de       	rcall	.-1004   	; 0x86c <prvUnlockQueue>
     c58:	02 d4       	rcall	.+2052   	; 0x145e <xTaskResumeAll>
     c5a:	81 11       	cpse	r24, r1
     c5c:	aa cf       	rjmp	.-172    	; 0xbb2 <xQueueReceive+0x2e>
     c5e:	ac dc       	rcall	.-1704   	; 0x5b8 <vPortYield>
     c60:	a8 cf       	rjmp	.-176    	; 0xbb2 <xQueueReceive+0x2e>
     c62:	c8 01       	movw	r24, r16
     c64:	03 de       	rcall	.-1018   	; 0x86c <prvUnlockQueue>
     c66:	fb d3       	rcall	.+2038   	; 0x145e <xTaskResumeAll>
     c68:	a4 cf       	rjmp	.-184    	; 0xbb2 <xQueueReceive+0x2e>
     c6a:	c8 01       	movw	r24, r16
     c6c:	ff dd       	rcall	.-1026   	; 0x86c <prvUnlockQueue>
     c6e:	f7 d3       	rcall	.+2030   	; 0x145e <xTaskResumeAll>
     c70:	c8 01       	movw	r24, r16
     c72:	68 dd       	rcall	.-1328   	; 0x744 <prvIsQueueEmpty>
     c74:	88 23       	and	r24, r24
     c76:	09 f4       	brne	.+2      	; 0xc7a <xQueueReceive+0xf6>
     c78:	9c cf       	rjmp	.-200    	; 0xbb2 <xQueueReceive+0x2e>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	29 96       	adiw	r28, 0x09	; 9
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	df 90       	pop	r13
     c96:	cf 90       	pop	r12
     c98:	08 95       	ret

00000c9a <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	0f 92       	push	r0
     ca6:	89 a1       	ldd	r24, Y+33	; 0x21
     ca8:	8f 3f       	cpi	r24, 0xFF	; 255
     caa:	09 f4       	brne	.+2      	; 0xcae <vQueueWaitForMessageRestricted+0x14>
     cac:	19 a2       	std	Y+33, r1	; 0x21
     cae:	8a a1       	ldd	r24, Y+34	; 0x22
     cb0:	8f 3f       	cpi	r24, 0xFF	; 255
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <vQueueWaitForMessageRestricted+0x1c>
     cb4:	1a a2       	std	Y+34, r1	; 0x22
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     cba:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cbc:	81 11       	cpse	r24, r1
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     cc0:	ce 01       	movw	r24, r28
     cc2:	43 96       	adiw	r24, 0x13	; 19
     cc4:	3e d5       	rcall	.+2684   	; 0x1742 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     cc6:	ce 01       	movw	r24, r28
     cc8:	d1 dd       	rcall	.-1118   	; 0x86c <prvUnlockQueue>
    }
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <prvResetNextTaskUnblockTime>:
     cd0:	e0 91 0f 10 	lds	r30, 0x100F	; 0x80100f <pxDelayedTaskList>
     cd4:	f0 91 10 10 	lds	r31, 0x1010	; 0x801010 <pxDelayedTaskList+0x1>
     cd8:	80 81       	ld	r24, Z
     cda:	81 11       	cpse	r24, r1
     cdc:	0c c0       	rjmp	.+24     	; 0xcf6 <prvResetNextTaskUnblockTime+0x26>
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	9f ef       	ldi	r25, 0xFF	; 255
     ce2:	dc 01       	movw	r26, r24
     ce4:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <xNextTaskUnblockTime>
     ce8:	90 93 da 0f 	sts	0x0FDA, r25	; 0x800fda <xNextTaskUnblockTime+0x1>
     cec:	a0 93 db 0f 	sts	0x0FDB, r26	; 0x800fdb <xNextTaskUnblockTime+0x2>
     cf0:	b0 93 dc 0f 	sts	0x0FDC, r27	; 0x800fdc <xNextTaskUnblockTime+0x3>
     cf4:	08 95       	ret
     cf6:	e0 91 0f 10 	lds	r30, 0x100F	; 0x80100f <pxDelayedTaskList>
     cfa:	f0 91 10 10 	lds	r31, 0x1010	; 0x801010 <pxDelayedTaskList+0x1>
     cfe:	07 80       	ldd	r0, Z+7	; 0x07
     d00:	f0 85       	ldd	r31, Z+8	; 0x08
     d02:	e0 2d       	mov	r30, r0
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	a2 81       	ldd	r26, Z+2	; 0x02
     d0a:	b3 81       	ldd	r27, Z+3	; 0x03
     d0c:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <xNextTaskUnblockTime>
     d10:	90 93 da 0f 	sts	0x0FDA, r25	; 0x800fda <xNextTaskUnblockTime+0x1>
     d14:	a0 93 db 0f 	sts	0x0FDB, r26	; 0x800fdb <xNextTaskUnblockTime+0x2>
     d18:	b0 93 dc 0f 	sts	0x0FDC, r27	; 0x800fdc <xNextTaskUnblockTime+0x3>
     d1c:	08 95       	ret

00000d1e <prvDeleteTCB>:
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
     d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d28:	3d db       	rcall	.-2438   	; 0x3a4 <vPortFree>
     d2a:	ce 01       	movw	r24, r28
     d2c:	3b db       	rcall	.-2442   	; 0x3a4 <vPortFree>
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <prvInitialiseNewTask>:
     d34:	4f 92       	push	r4
     d36:	5f 92       	push	r5
     d38:	6f 92       	push	r6
     d3a:	7f 92       	push	r7
     d3c:	8f 92       	push	r8
     d3e:	9f 92       	push	r9
     d40:	af 92       	push	r10
     d42:	bf 92       	push	r11
     d44:	cf 92       	push	r12
     d46:	df 92       	push	r13
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	2c 01       	movw	r4, r24
     d54:	5b 01       	movw	r10, r22
     d56:	4a 01       	movw	r8, r20
     d58:	39 01       	movw	r6, r18
     d5a:	e6 01       	movw	r28, r12
     d5c:	65 ea       	ldi	r22, 0xA5	; 165
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d64:	0e 94 4e 13 	call	0x269c	; 0x269c <memset>
     d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	82 1a       	sub	r8, r18
     d70:	91 08       	sbc	r9, r1
     d72:	88 0e       	add	r8, r24
     d74:	99 1e       	adc	r9, r25
     d76:	a1 14       	cp	r10, r1
     d78:	b1 04       	cpc	r11, r1
     d7a:	89 f4       	brne	.+34     	; 0xd9e <prvInitialiseNewTask+0x6a>
     d7c:	15 c0       	rjmp	.+42     	; 0xda8 <prvInitialiseNewTask+0x74>
     d7e:	82 2f       	mov	r24, r18
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	f5 01       	movw	r30, r10
     d84:	e8 0f       	add	r30, r24
     d86:	f9 1f       	adc	r31, r25
     d88:	30 81       	ld	r19, Z
     d8a:	de 01       	movw	r26, r28
     d8c:	a8 0f       	add	r26, r24
     d8e:	b9 1f       	adc	r27, r25
     d90:	5d 96       	adiw	r26, 0x1d	; 29
     d92:	3c 93       	st	X, r19
     d94:	80 81       	ld	r24, Z
     d96:	88 23       	and	r24, r24
     d98:	29 f0       	breq	.+10     	; 0xda4 <prvInitialiseNewTask+0x70>
     d9a:	2f 5f       	subi	r18, 0xFF	; 255
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <prvInitialiseNewTask+0x6c>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	20 31       	cpi	r18, 0x10	; 16
     da2:	68 f3       	brcs	.-38     	; 0xd7e <prvInitialiseNewTask+0x4a>
     da4:	1c a6       	std	Y+44, r1	; 0x2c
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <prvInitialiseNewTask+0x76>
     da8:	1d 8e       	std	Y+29, r1	; 0x1d
     daa:	0a 30       	cpi	r16, 0x0A	; 10
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <prvInitialiseNewTask+0x7c>
     dae:	09 e0       	ldi	r16, 0x09	; 9
     db0:	0a 8f       	std	Y+26, r16	; 0x1a
     db2:	0d a7       	std	Y+45, r16	; 0x2d
     db4:	1e a6       	std	Y+46, r1	; 0x2e
     db6:	ce 01       	movw	r24, r28
     db8:	02 96       	adiw	r24, 0x02	; 2
     dba:	41 db       	rcall	.-2430   	; 0x43e <vListInitialiseItem>
     dbc:	ce 01       	movw	r24, r28
     dbe:	0e 96       	adiw	r24, 0x0e	; 14
     dc0:	3e db       	rcall	.-2436   	; 0x43e <vListInitialiseItem>
     dc2:	db 87       	std	Y+11, r29	; 0x0b
     dc4:	ca 87       	std	Y+10, r28	; 0x0a
     dc6:	8a e0       	ldi	r24, 0x0A	; 10
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a0 e0       	ldi	r26, 0x00	; 0
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	80 1b       	sub	r24, r16
     dd0:	91 09       	sbc	r25, r1
     dd2:	a1 09       	sbc	r26, r1
     dd4:	b1 09       	sbc	r27, r1
     dd6:	8e 87       	std	Y+14, r24	; 0x0e
     dd8:	9f 87       	std	Y+15, r25	; 0x0f
     dda:	a8 8b       	std	Y+16, r26	; 0x10
     ddc:	b9 8b       	std	Y+17, r27	; 0x11
     dde:	df 8b       	std	Y+23, r29	; 0x17
     de0:	ce 8b       	std	Y+22, r28	; 0x16
     de2:	84 e0       	ldi	r24, 0x04	; 4
     de4:	fe 01       	movw	r30, r28
     de6:	bf 96       	adiw	r30, 0x2f	; 47
     de8:	df 01       	movw	r26, r30
     dea:	1d 92       	st	X+, r1
     dec:	8a 95       	dec	r24
     dee:	e9 f7       	brne	.-6      	; 0xdea <prvInitialiseNewTask+0xb6>
     df0:	1b aa       	std	Y+51, r1	; 0x33
     df2:	a3 01       	movw	r20, r6
     df4:	b2 01       	movw	r22, r4
     df6:	c4 01       	movw	r24, r8
     df8:	96 db       	rcall	.-2260   	; 0x526 <pxPortInitialiseStack>
     dfa:	99 83       	std	Y+1, r25	; 0x01
     dfc:	88 83       	st	Y, r24
     dfe:	e1 14       	cp	r14, r1
     e00:	f1 04       	cpc	r15, r1
     e02:	19 f0       	breq	.+6      	; 0xe0a <prvInitialiseNewTask+0xd6>
     e04:	f7 01       	movw	r30, r14
     e06:	d1 83       	std	Z+1, r29	; 0x01
     e08:	c0 83       	st	Z, r28
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	9f 90       	pop	r9
     e1e:	8f 90       	pop	r8
     e20:	7f 90       	pop	r7
     e22:	6f 90       	pop	r6
     e24:	5f 90       	pop	r5
     e26:	4f 90       	pop	r4
     e28:	08 95       	ret

00000e2a <prvInitialiseTaskLists>:
     e2a:	cf 93       	push	r28
     e2c:	c0 e0       	ldi	r28, 0x00	; 0
     e2e:	08 c0       	rjmp	.+16     	; 0xe40 <prvInitialiseTaskLists+0x16>
     e30:	2b e0       	ldi	r18, 0x0B	; 11
     e32:	c2 9f       	mul	r28, r18
     e34:	c0 01       	movw	r24, r0
     e36:	11 24       	eor	r1, r1
     e38:	89 5d       	subi	r24, 0xD9	; 217
     e3a:	9f 4e       	sbci	r25, 0xEF	; 239
     e3c:	ef da       	rcall	.-2594   	; 0x41c <vListInitialise>
     e3e:	cf 5f       	subi	r28, 0xFF	; 255
     e40:	ca 30       	cpi	r28, 0x0A	; 10
     e42:	b0 f3       	brcs	.-20     	; 0xe30 <prvInitialiseTaskLists+0x6>
     e44:	8c e1       	ldi	r24, 0x1C	; 28
     e46:	90 e1       	ldi	r25, 0x10	; 16
     e48:	e9 da       	rcall	.-2606   	; 0x41c <vListInitialise>
     e4a:	81 e1       	ldi	r24, 0x11	; 17
     e4c:	90 e1       	ldi	r25, 0x10	; 16
     e4e:	e6 da       	rcall	.-2612   	; 0x41c <vListInitialise>
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	90 e1       	ldi	r25, 0x10	; 16
     e54:	e3 da       	rcall	.-2618   	; 0x41c <vListInitialise>
     e56:	87 ef       	ldi	r24, 0xF7	; 247
     e58:	9f e0       	ldi	r25, 0x0F	; 15
     e5a:	e0 da       	rcall	.-2624   	; 0x41c <vListInitialise>
     e5c:	8b ee       	ldi	r24, 0xEB	; 235
     e5e:	9f e0       	ldi	r25, 0x0F	; 15
     e60:	dd da       	rcall	.-2630   	; 0x41c <vListInitialise>
     e62:	8c e1       	ldi	r24, 0x1C	; 28
     e64:	90 e1       	ldi	r25, 0x10	; 16
     e66:	90 93 10 10 	sts	0x1010, r25	; 0x801010 <pxDelayedTaskList+0x1>
     e6a:	80 93 0f 10 	sts	0x100F, r24	; 0x80100f <pxDelayedTaskList>
     e6e:	81 e1       	ldi	r24, 0x11	; 17
     e70:	90 e1       	ldi	r25, 0x10	; 16
     e72:	90 93 0e 10 	sts	0x100E, r25	; 0x80100e <pxOverflowDelayedTaskList+0x1>
     e76:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <pxOverflowDelayedTaskList>
     e7a:	cf 91       	pop	r28
     e7c:	08 95       	ret

00000e7e <prvAddNewTaskToReadyList>:
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	0f 92       	push	r0
     e8a:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <uxCurrentNumberOfTasks>
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	80 93 ea 0f 	sts	0x0FEA, r24	; 0x800fea <uxCurrentNumberOfTasks>
     e94:	80 91 95 10 	lds	r24, 0x1095	; 0x801095 <pxCurrentTCB>
     e98:	90 91 96 10 	lds	r25, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
     e9c:	89 2b       	or	r24, r25
     e9e:	51 f4       	brne	.+20     	; 0xeb4 <prvAddNewTaskToReadyList+0x36>
     ea0:	d0 93 96 10 	sts	0x1096, r29	; 0x801096 <pxCurrentTCB+0x1>
     ea4:	c0 93 95 10 	sts	0x1095, r28	; 0x801095 <pxCurrentTCB>
     ea8:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <uxCurrentNumberOfTasks>
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 f4       	brne	.+36     	; 0xed4 <prvAddNewTaskToReadyList+0x56>
     eb0:	bc df       	rcall	.-136    	; 0xe2a <prvInitialiseTaskLists>
     eb2:	10 c0       	rjmp	.+32     	; 0xed4 <prvAddNewTaskToReadyList+0x56>
     eb4:	80 91 e4 0f 	lds	r24, 0x0FE4	; 0x800fe4 <xSchedulerRunning>
     eb8:	81 11       	cpse	r24, r1
     eba:	0c c0       	rjmp	.+24     	; 0xed4 <prvAddNewTaskToReadyList+0x56>
     ebc:	e0 91 95 10 	lds	r30, 0x1095	; 0x801095 <pxCurrentTCB>
     ec0:	f0 91 96 10 	lds	r31, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
     ec4:	92 8d       	ldd	r25, Z+26	; 0x1a
     ec6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ec8:	89 17       	cp	r24, r25
     eca:	20 f0       	brcs	.+8      	; 0xed4 <prvAddNewTaskToReadyList+0x56>
     ecc:	d0 93 96 10 	sts	0x1096, r29	; 0x801096 <pxCurrentTCB+0x1>
     ed0:	c0 93 95 10 	sts	0x1095, r28	; 0x801095 <pxCurrentTCB>
     ed4:	80 91 dd 0f 	lds	r24, 0x0FDD	; 0x800fdd <uxTaskNumber>
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	80 93 dd 0f 	sts	0x0FDD, r24	; 0x800fdd <uxTaskNumber>
     ede:	ea 8d       	ldd	r30, Y+26	; 0x1a
     ee0:	80 91 e5 0f 	lds	r24, 0x0FE5	; 0x800fe5 <uxTopReadyPriority>
     ee4:	8e 17       	cp	r24, r30
     ee6:	10 f4       	brcc	.+4      	; 0xeec <prvAddNewTaskToReadyList+0x6e>
     ee8:	e0 93 e5 0f 	sts	0x0FE5, r30	; 0x800fe5 <uxTopReadyPriority>
     eec:	8b e0       	ldi	r24, 0x0B	; 11
     eee:	8e 9f       	mul	r24, r30
     ef0:	f0 01       	movw	r30, r0
     ef2:	11 24       	eor	r1, r1
     ef4:	e9 5d       	subi	r30, 0xD9	; 217
     ef6:	ff 4e       	sbci	r31, 0xEF	; 239
     ef8:	01 80       	ldd	r0, Z+1	; 0x01
     efa:	f2 81       	ldd	r31, Z+2	; 0x02
     efc:	e0 2d       	mov	r30, r0
     efe:	ff 83       	std	Y+7, r31	; 0x07
     f00:	ee 83       	std	Y+6, r30	; 0x06
     f02:	26 81       	ldd	r18, Z+6	; 0x06
     f04:	37 81       	ldd	r19, Z+7	; 0x07
     f06:	39 87       	std	Y+9, r19	; 0x09
     f08:	28 87       	std	Y+8, r18	; 0x08
     f0a:	a6 81       	ldd	r26, Z+6	; 0x06
     f0c:	b7 81       	ldd	r27, Z+7	; 0x07
     f0e:	9e 01       	movw	r18, r28
     f10:	2e 5f       	subi	r18, 0xFE	; 254
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	15 96       	adiw	r26, 0x05	; 5
     f16:	3c 93       	st	X, r19
     f18:	2e 93       	st	-X, r18
     f1a:	14 97       	sbiw	r26, 0x04	; 4
     f1c:	37 83       	std	Z+7, r19	; 0x07
     f1e:	26 83       	std	Z+6, r18	; 0x06
     f20:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f22:	8e 9f       	mul	r24, r30
     f24:	f0 01       	movw	r30, r0
     f26:	11 24       	eor	r1, r1
     f28:	e9 5d       	subi	r30, 0xD9	; 217
     f2a:	ff 4e       	sbci	r31, 0xEF	; 239
     f2c:	fd 87       	std	Y+13, r31	; 0x0d
     f2e:	ec 87       	std	Y+12, r30	; 0x0c
     f30:	80 81       	ld	r24, Z
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	80 83       	st	Z, r24
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	80 91 e4 0f 	lds	r24, 0x0FE4	; 0x800fe4 <xSchedulerRunning>
     f3e:	88 23       	and	r24, r24
     f40:	49 f0       	breq	.+18     	; 0xf54 <prvAddNewTaskToReadyList+0xd6>
     f42:	e0 91 95 10 	lds	r30, 0x1095	; 0x801095 <pxCurrentTCB>
     f46:	f0 91 96 10 	lds	r31, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
     f4a:	92 8d       	ldd	r25, Z+26	; 0x1a
     f4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f4e:	98 17       	cp	r25, r24
     f50:	08 f4       	brcc	.+2      	; 0xf54 <prvAddNewTaskToReadyList+0xd6>
     f52:	32 db       	rcall	.-2460   	; 0x5b8 <vPortYield>
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <prvCheckTasksWaitingTermination>:
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	1a c0       	rjmp	.+52     	; 0xf94 <prvCheckTasksWaitingTermination+0x3a>
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	0f 92       	push	r0
     f66:	e0 91 fe 0f 	lds	r30, 0x0FFE	; 0x800ffe <xTasksWaitingTermination+0x7>
     f6a:	f0 91 ff 0f 	lds	r31, 0x0FFF	; 0x800fff <xTasksWaitingTermination+0x8>
     f6e:	c0 85       	ldd	r28, Z+8	; 0x08
     f70:	d1 85       	ldd	r29, Z+9	; 0x09
     f72:	ce 01       	movw	r24, r28
     f74:	02 96       	adiw	r24, 0x02	; 2
     f76:	a4 da       	rcall	.-2744   	; 0x4c0 <uxListRemove>
     f78:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <uxCurrentNumberOfTasks>
     f7c:	81 50       	subi	r24, 0x01	; 1
     f7e:	80 93 ea 0f 	sts	0x0FEA, r24	; 0x800fea <uxCurrentNumberOfTasks>
     f82:	80 91 f6 0f 	lds	r24, 0x0FF6	; 0x800ff6 <uxDeletedTasksWaitingCleanUp>
     f86:	81 50       	subi	r24, 0x01	; 1
     f88:	80 93 f6 0f 	sts	0x0FF6, r24	; 0x800ff6 <uxDeletedTasksWaitingCleanUp>
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	ce 01       	movw	r24, r28
     f92:	c5 de       	rcall	.-630    	; 0xd1e <prvDeleteTCB>
     f94:	80 91 f6 0f 	lds	r24, 0x0FF6	; 0x800ff6 <uxDeletedTasksWaitingCleanUp>
     f98:	81 11       	cpse	r24, r1
     f9a:	e2 cf       	rjmp	.-60     	; 0xf60 <prvCheckTasksWaitingTermination+0x6>
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <prvAddCurrentTaskToDelayedList>:
     fa2:	8f 92       	push	r8
     fa4:	9f 92       	push	r9
     fa6:	af 92       	push	r10
     fa8:	bf 92       	push	r11
     faa:	cf 92       	push	r12
     fac:	df 92       	push	r13
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	6b 01       	movw	r12, r22
     fb8:	7c 01       	movw	r14, r24
     fba:	c4 2f       	mov	r28, r20
     fbc:	80 90 e6 0f 	lds	r8, 0x0FE6	; 0x800fe6 <xTickCount>
     fc0:	90 90 e7 0f 	lds	r9, 0x0FE7	; 0x800fe7 <xTickCount+0x1>
     fc4:	a0 90 e8 0f 	lds	r10, 0x0FE8	; 0x800fe8 <xTickCount+0x2>
     fc8:	b0 90 e9 0f 	lds	r11, 0x0FE9	; 0x800fe9 <xTickCount+0x3>
     fcc:	80 91 95 10 	lds	r24, 0x1095	; 0x801095 <pxCurrentTCB>
     fd0:	90 91 96 10 	lds	r25, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
     fd4:	02 96       	adiw	r24, 0x02	; 2
     fd6:	74 da       	rcall	.-2840   	; 0x4c0 <uxListRemove>
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	c8 16       	cp	r12, r24
     fdc:	d8 06       	cpc	r13, r24
     fde:	e8 06       	cpc	r14, r24
     fe0:	f8 06       	cpc	r15, r24
     fe2:	b1 f5       	brne	.+108    	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
     fe4:	cc 23       	and	r28, r28
     fe6:	a1 f1       	breq	.+104    	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
     fe8:	eb ee       	ldi	r30, 0xEB	; 235
     fea:	ff e0       	ldi	r31, 0x0F	; 15
     fec:	a1 81       	ldd	r26, Z+1	; 0x01
     fee:	b2 81       	ldd	r27, Z+2	; 0x02
     ff0:	c0 91 95 10 	lds	r28, 0x1095	; 0x801095 <pxCurrentTCB>
     ff4:	d0 91 96 10 	lds	r29, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
     ff8:	bf 83       	std	Y+7, r27	; 0x07
     ffa:	ae 83       	std	Y+6, r26	; 0x06
     ffc:	c0 91 95 10 	lds	r28, 0x1095	; 0x801095 <pxCurrentTCB>
    1000:	d0 91 96 10 	lds	r29, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1004:	16 96       	adiw	r26, 0x06	; 6
    1006:	8d 91       	ld	r24, X+
    1008:	9c 91       	ld	r25, X
    100a:	17 97       	sbiw	r26, 0x07	; 7
    100c:	99 87       	std	Y+9, r25	; 0x09
    100e:	88 87       	std	Y+8, r24	; 0x08
    1010:	16 96       	adiw	r26, 0x06	; 6
    1012:	cd 91       	ld	r28, X+
    1014:	dc 91       	ld	r29, X
    1016:	17 97       	sbiw	r26, 0x07	; 7
    1018:	80 91 95 10 	lds	r24, 0x1095	; 0x801095 <pxCurrentTCB>
    101c:	90 91 96 10 	lds	r25, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1020:	02 96       	adiw	r24, 0x02	; 2
    1022:	9d 83       	std	Y+5, r25	; 0x05
    1024:	8c 83       	std	Y+4, r24	; 0x04
    1026:	80 91 95 10 	lds	r24, 0x1095	; 0x801095 <pxCurrentTCB>
    102a:	90 91 96 10 	lds	r25, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    102e:	02 96       	adiw	r24, 0x02	; 2
    1030:	17 96       	adiw	r26, 0x07	; 7
    1032:	9c 93       	st	X, r25
    1034:	8e 93       	st	-X, r24
    1036:	16 97       	sbiw	r26, 0x06	; 6
    1038:	a0 91 95 10 	lds	r26, 0x1095	; 0x801095 <pxCurrentTCB>
    103c:	b0 91 96 10 	lds	r27, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1040:	1d 96       	adiw	r26, 0x0d	; 13
    1042:	fc 93       	st	X, r31
    1044:	ee 93       	st	-X, r30
    1046:	1c 97       	sbiw	r26, 0x0c	; 12
    1048:	80 81       	ld	r24, Z
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	80 83       	st	Z, r24
    104e:	3d c0       	rjmp	.+122    	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
    1050:	c8 0c       	add	r12, r8
    1052:	d9 1c       	adc	r13, r9
    1054:	ea 1c       	adc	r14, r10
    1056:	fb 1c       	adc	r15, r11
    1058:	e0 91 95 10 	lds	r30, 0x1095	; 0x801095 <pxCurrentTCB>
    105c:	f0 91 96 10 	lds	r31, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1060:	c2 82       	std	Z+2, r12	; 0x02
    1062:	d3 82       	std	Z+3, r13	; 0x03
    1064:	e4 82       	std	Z+4, r14	; 0x04
    1066:	f5 82       	std	Z+5, r15	; 0x05
    1068:	c8 14       	cp	r12, r8
    106a:	d9 04       	cpc	r13, r9
    106c:	ea 04       	cpc	r14, r10
    106e:	fb 04       	cpc	r15, r11
    1070:	60 f4       	brcc	.+24     	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>
    1072:	60 91 95 10 	lds	r22, 0x1095	; 0x801095 <pxCurrentTCB>
    1076:	70 91 96 10 	lds	r23, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    107a:	80 91 0d 10 	lds	r24, 0x100D	; 0x80100d <pxOverflowDelayedTaskList>
    107e:	90 91 0e 10 	lds	r25, 0x100E	; 0x80100e <pxOverflowDelayedTaskList+0x1>
    1082:	6e 5f       	subi	r22, 0xFE	; 254
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	df d9       	rcall	.-3138   	; 0x446 <vListInsert>
    1088:	20 c0       	rjmp	.+64     	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
    108a:	60 91 95 10 	lds	r22, 0x1095	; 0x801095 <pxCurrentTCB>
    108e:	70 91 96 10 	lds	r23, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1092:	80 91 0f 10 	lds	r24, 0x100F	; 0x80100f <pxDelayedTaskList>
    1096:	90 91 10 10 	lds	r25, 0x1010	; 0x801010 <pxDelayedTaskList+0x1>
    109a:	6e 5f       	subi	r22, 0xFE	; 254
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	d3 d9       	rcall	.-3162   	; 0x446 <vListInsert>
    10a0:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <xNextTaskUnblockTime>
    10a4:	90 91 da 0f 	lds	r25, 0x0FDA	; 0x800fda <xNextTaskUnblockTime+0x1>
    10a8:	a0 91 db 0f 	lds	r26, 0x0FDB	; 0x800fdb <xNextTaskUnblockTime+0x2>
    10ac:	b0 91 dc 0f 	lds	r27, 0x0FDC	; 0x800fdc <xNextTaskUnblockTime+0x3>
    10b0:	c8 16       	cp	r12, r24
    10b2:	d9 06       	cpc	r13, r25
    10b4:	ea 06       	cpc	r14, r26
    10b6:	fb 06       	cpc	r15, r27
    10b8:	40 f4       	brcc	.+16     	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
    10ba:	c0 92 d9 0f 	sts	0x0FD9, r12	; 0x800fd9 <xNextTaskUnblockTime>
    10be:	d0 92 da 0f 	sts	0x0FDA, r13	; 0x800fda <xNextTaskUnblockTime+0x1>
    10c2:	e0 92 db 0f 	sts	0x0FDB, r14	; 0x800fdb <xNextTaskUnblockTime+0x2>
    10c6:	f0 92 dc 0f 	sts	0x0FDC, r15	; 0x800fdc <xNextTaskUnblockTime+0x3>
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	bf 90       	pop	r11
    10d8:	af 90       	pop	r10
    10da:	9f 90       	pop	r9
    10dc:	8f 90       	pop	r8
    10de:	08 95       	ret

000010e0 <xTaskCreate>:
    10e0:	2f 92       	push	r2
    10e2:	3f 92       	push	r3
    10e4:	4f 92       	push	r4
    10e6:	5f 92       	push	r5
    10e8:	6f 92       	push	r6
    10ea:	7f 92       	push	r7
    10ec:	8f 92       	push	r8
    10ee:	9f 92       	push	r9
    10f0:	af 92       	push	r10
    10f2:	bf 92       	push	r11
    10f4:	cf 92       	push	r12
    10f6:	df 92       	push	r13
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	3c 01       	movw	r6, r24
    1104:	1b 01       	movw	r2, r22
    1106:	4a 01       	movw	r8, r20
    1108:	29 01       	movw	r4, r18
    110a:	ca 01       	movw	r24, r20
    110c:	a3 d8       	rcall	.-3770   	; 0x254 <pvPortMalloc>
    110e:	6c 01       	movw	r12, r24
    1110:	89 2b       	or	r24, r25
    1112:	61 f0       	breq	.+24     	; 0x112c <xTaskCreate+0x4c>
    1114:	84 e3       	ldi	r24, 0x34	; 52
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9d d8       	rcall	.-3782   	; 0x254 <pvPortMalloc>
    111a:	ec 01       	movw	r28, r24
    111c:	89 2b       	or	r24, r25
    111e:	19 f0       	breq	.+6      	; 0x1126 <xTaskCreate+0x46>
    1120:	dc 8e       	std	Y+28, r13	; 0x1c
    1122:	cb 8e       	std	Y+27, r12	; 0x1b
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <xTaskCreate+0x50>
    1126:	c6 01       	movw	r24, r12
    1128:	3d d9       	rcall	.-3462   	; 0x3a4 <vPortFree>
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <xTaskCreate+0x50>
    112c:	c0 e0       	ldi	r28, 0x00	; 0
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	20 97       	sbiw	r28, 0x00	; 0
    1132:	61 f0       	breq	.+24     	; 0x114c <xTaskCreate+0x6c>
    1134:	a1 2c       	mov	r10, r1
    1136:	b1 2c       	mov	r11, r1
    1138:	6e 01       	movw	r12, r28
    113a:	92 01       	movw	r18, r4
    113c:	a4 01       	movw	r20, r8
    113e:	b1 01       	movw	r22, r2
    1140:	c3 01       	movw	r24, r6
    1142:	f8 dd       	rcall	.-1040   	; 0xd34 <prvInitialiseNewTask>
    1144:	ce 01       	movw	r24, r28
    1146:	9b de       	rcall	.-714    	; 0xe7e <prvAddNewTaskToReadyList>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	01 c0       	rjmp	.+2      	; 0x114e <xTaskCreate+0x6e>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
    115c:	bf 90       	pop	r11
    115e:	af 90       	pop	r10
    1160:	9f 90       	pop	r9
    1162:	8f 90       	pop	r8
    1164:	7f 90       	pop	r7
    1166:	6f 90       	pop	r6
    1168:	5f 90       	pop	r5
    116a:	4f 90       	pop	r4
    116c:	3f 90       	pop	r3
    116e:	2f 90       	pop	r2
    1170:	08 95       	ret

00001172 <vTaskStartScheduler>:
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	0f 2e       	mov	r0, r31
    117a:	f7 ed       	ldi	r31, 0xD7	; 215
    117c:	ef 2e       	mov	r14, r31
    117e:	ff e0       	ldi	r31, 0x0F	; 15
    1180:	ff 2e       	mov	r15, r31
    1182:	f0 2d       	mov	r31, r0
    1184:	00 e0       	ldi	r16, 0x00	; 0
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 ec       	ldi	r20, 0xC0	; 192
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	72 e0       	ldi	r23, 0x02	; 2
    1192:	8c e7       	ldi	r24, 0x7C	; 124
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a4 df       	rcall	.-184    	; 0x10e0 <xTaskCreate>
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	09 f4       	brne	.+2      	; 0x119e <vTaskStartScheduler+0x2c>
    119c:	31 d5       	rcall	.+2658   	; 0x1c00 <xTimerCreateTimerTask>
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	c1 f4       	brne	.+48     	; 0x11d2 <vTaskStartScheduler+0x60>
    11a2:	f8 94       	cli
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	9f ef       	ldi	r25, 0xFF	; 255
    11a8:	dc 01       	movw	r26, r24
    11aa:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <xNextTaskUnblockTime>
    11ae:	90 93 da 0f 	sts	0x0FDA, r25	; 0x800fda <xNextTaskUnblockTime+0x1>
    11b2:	a0 93 db 0f 	sts	0x0FDB, r26	; 0x800fdb <xNextTaskUnblockTime+0x2>
    11b6:	b0 93 dc 0f 	sts	0x0FDC, r27	; 0x800fdc <xNextTaskUnblockTime+0x3>
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 e4 0f 	sts	0x0FE4, r24	; 0x800fe4 <xSchedulerRunning>
    11c0:	10 92 e6 0f 	sts	0x0FE6, r1	; 0x800fe6 <xTickCount>
    11c4:	10 92 e7 0f 	sts	0x0FE7, r1	; 0x800fe7 <xTickCount+0x1>
    11c8:	10 92 e8 0f 	sts	0x0FE8, r1	; 0x800fe8 <xTickCount+0x2>
    11cc:	10 92 e9 0f 	sts	0x0FE9, r1	; 0x800fe9 <xTickCount+0x3>
    11d0:	c1 d9       	rcall	.-3198   	; 0x554 <xPortStartScheduler>
    11d2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	08 95       	ret

000011de <vTaskSuspendAll>:
    11de:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <uxSchedulerSuspended>
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	80 93 d6 0f 	sts	0x0FD6, r24	; 0x800fd6 <uxSchedulerSuspended>
    11e8:	08 95       	ret

000011ea <xTaskGetTickCount>:
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	0f 92       	push	r0
    11f0:	60 91 e6 0f 	lds	r22, 0x0FE6	; 0x800fe6 <xTickCount>
    11f4:	70 91 e7 0f 	lds	r23, 0x0FE7	; 0x800fe7 <xTickCount+0x1>
    11f8:	80 91 e8 0f 	lds	r24, 0x0FE8	; 0x800fe8 <xTickCount+0x2>
    11fc:	90 91 e9 0f 	lds	r25, 0x0FE9	; 0x800fe9 <xTickCount+0x3>
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	08 95       	ret

00001206 <xTaskIncrementTick>:
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <uxSchedulerSuspended>
    1216:	81 11       	cpse	r24, r1
    1218:	05 c1       	rjmp	.+522    	; 0x1424 <xTaskIncrementTick+0x21e>
    121a:	c0 90 e6 0f 	lds	r12, 0x0FE6	; 0x800fe6 <xTickCount>
    121e:	d0 90 e7 0f 	lds	r13, 0x0FE7	; 0x800fe7 <xTickCount+0x1>
    1222:	e0 90 e8 0f 	lds	r14, 0x0FE8	; 0x800fe8 <xTickCount+0x2>
    1226:	f0 90 e9 0f 	lds	r15, 0x0FE9	; 0x800fe9 <xTickCount+0x3>
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	c8 1a       	sub	r12, r24
    122e:	d8 0a       	sbc	r13, r24
    1230:	e8 0a       	sbc	r14, r24
    1232:	f8 0a       	sbc	r15, r24
    1234:	c0 92 e6 0f 	sts	0x0FE6, r12	; 0x800fe6 <xTickCount>
    1238:	d0 92 e7 0f 	sts	0x0FE7, r13	; 0x800fe7 <xTickCount+0x1>
    123c:	e0 92 e8 0f 	sts	0x0FE8, r14	; 0x800fe8 <xTickCount+0x2>
    1240:	f0 92 e9 0f 	sts	0x0FE9, r15	; 0x800fe9 <xTickCount+0x3>
    1244:	c1 14       	cp	r12, r1
    1246:	d1 04       	cpc	r13, r1
    1248:	e1 04       	cpc	r14, r1
    124a:	f1 04       	cpc	r15, r1
    124c:	b1 f4       	brne	.+44     	; 0x127a <xTaskIncrementTick+0x74>
    124e:	80 91 0f 10 	lds	r24, 0x100F	; 0x80100f <pxDelayedTaskList>
    1252:	90 91 10 10 	lds	r25, 0x1010	; 0x801010 <pxDelayedTaskList+0x1>
    1256:	20 91 0d 10 	lds	r18, 0x100D	; 0x80100d <pxOverflowDelayedTaskList>
    125a:	30 91 0e 10 	lds	r19, 0x100E	; 0x80100e <pxOverflowDelayedTaskList+0x1>
    125e:	30 93 10 10 	sts	0x1010, r19	; 0x801010 <pxDelayedTaskList+0x1>
    1262:	20 93 0f 10 	sts	0x100F, r18	; 0x80100f <pxDelayedTaskList>
    1266:	90 93 0e 10 	sts	0x100E, r25	; 0x80100e <pxOverflowDelayedTaskList+0x1>
    126a:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <pxOverflowDelayedTaskList>
    126e:	80 91 de 0f 	lds	r24, 0x0FDE	; 0x800fde <xNumOfOverflows>
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 93 de 0f 	sts	0x0FDE, r24	; 0x800fde <xNumOfOverflows>
    1278:	2b dd       	rcall	.-1450   	; 0xcd0 <prvResetNextTaskUnblockTime>
    127a:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <xNextTaskUnblockTime>
    127e:	90 91 da 0f 	lds	r25, 0x0FDA	; 0x800fda <xNextTaskUnblockTime+0x1>
    1282:	a0 91 db 0f 	lds	r26, 0x0FDB	; 0x800fdb <xNextTaskUnblockTime+0x2>
    1286:	b0 91 dc 0f 	lds	r27, 0x0FDC	; 0x800fdc <xNextTaskUnblockTime+0x3>
    128a:	c8 16       	cp	r12, r24
    128c:	d9 06       	cpc	r13, r25
    128e:	ea 06       	cpc	r14, r26
    1290:	fb 06       	cpc	r15, r27
    1292:	20 f4       	brcc	.+8      	; 0x129c <xTaskIncrementTick+0x96>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	b2 c0       	rjmp	.+356    	; 0x13fc <xTaskIncrementTick+0x1f6>
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	01 c0       	rjmp	.+2      	; 0x129e <xTaskIncrementTick+0x98>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	e0 91 0f 10 	lds	r30, 0x100F	; 0x80100f <pxDelayedTaskList>
    12a2:	f0 91 10 10 	lds	r31, 0x1010	; 0x801010 <pxDelayedTaskList+0x1>
    12a6:	90 81       	ld	r25, Z
    12a8:	91 11       	cpse	r25, r1
    12aa:	0c c0       	rjmp	.+24     	; 0x12c4 <xTaskIncrementTick+0xbe>
    12ac:	4f ef       	ldi	r20, 0xFF	; 255
    12ae:	5f ef       	ldi	r21, 0xFF	; 255
    12b0:	ba 01       	movw	r22, r20
    12b2:	40 93 d9 0f 	sts	0x0FD9, r20	; 0x800fd9 <xNextTaskUnblockTime>
    12b6:	50 93 da 0f 	sts	0x0FDA, r21	; 0x800fda <xNextTaskUnblockTime+0x1>
    12ba:	60 93 db 0f 	sts	0x0FDB, r22	; 0x800fdb <xNextTaskUnblockTime+0x2>
    12be:	70 93 dc 0f 	sts	0x0FDC, r23	; 0x800fdc <xNextTaskUnblockTime+0x3>
    12c2:	9c c0       	rjmp	.+312    	; 0x13fc <xTaskIncrementTick+0x1f6>
    12c4:	e0 91 0f 10 	lds	r30, 0x100F	; 0x80100f <pxDelayedTaskList>
    12c8:	f0 91 10 10 	lds	r31, 0x1010	; 0x801010 <pxDelayedTaskList+0x1>
    12cc:	07 80       	ldd	r0, Z+7	; 0x07
    12ce:	f0 85       	ldd	r31, Z+8	; 0x08
    12d0:	e0 2d       	mov	r30, r0
    12d2:	00 84       	ldd	r0, Z+8	; 0x08
    12d4:	f1 85       	ldd	r31, Z+9	; 0x09
    12d6:	e0 2d       	mov	r30, r0
    12d8:	42 81       	ldd	r20, Z+2	; 0x02
    12da:	53 81       	ldd	r21, Z+3	; 0x03
    12dc:	64 81       	ldd	r22, Z+4	; 0x04
    12de:	75 81       	ldd	r23, Z+5	; 0x05
    12e0:	c4 16       	cp	r12, r20
    12e2:	d5 06       	cpc	r13, r21
    12e4:	e6 06       	cpc	r14, r22
    12e6:	f7 06       	cpc	r15, r23
    12e8:	48 f4       	brcc	.+18     	; 0x12fc <xTaskIncrementTick+0xf6>
    12ea:	40 93 d9 0f 	sts	0x0FD9, r20	; 0x800fd9 <xNextTaskUnblockTime>
    12ee:	50 93 da 0f 	sts	0x0FDA, r21	; 0x800fda <xNextTaskUnblockTime+0x1>
    12f2:	60 93 db 0f 	sts	0x0FDB, r22	; 0x800fdb <xNextTaskUnblockTime+0x2>
    12f6:	70 93 dc 0f 	sts	0x0FDC, r23	; 0x800fdc <xNextTaskUnblockTime+0x3>
    12fa:	80 c0       	rjmp	.+256    	; 0x13fc <xTaskIncrementTick+0x1f6>
    12fc:	a4 85       	ldd	r26, Z+12	; 0x0c
    12fe:	b5 85       	ldd	r27, Z+13	; 0x0d
    1300:	c6 81       	ldd	r28, Z+6	; 0x06
    1302:	d7 81       	ldd	r29, Z+7	; 0x07
    1304:	20 85       	ldd	r18, Z+8	; 0x08
    1306:	31 85       	ldd	r19, Z+9	; 0x09
    1308:	3f 83       	std	Y+7, r19	; 0x07
    130a:	2e 83       	std	Y+6, r18	; 0x06
    130c:	c0 85       	ldd	r28, Z+8	; 0x08
    130e:	d1 85       	ldd	r29, Z+9	; 0x09
    1310:	26 81       	ldd	r18, Z+6	; 0x06
    1312:	37 81       	ldd	r19, Z+7	; 0x07
    1314:	3d 83       	std	Y+5, r19	; 0x05
    1316:	2c 83       	std	Y+4, r18	; 0x04
    1318:	11 96       	adiw	r26, 0x01	; 1
    131a:	4d 91       	ld	r20, X+
    131c:	5c 91       	ld	r21, X
    131e:	12 97       	sbiw	r26, 0x02	; 2
    1320:	9f 01       	movw	r18, r30
    1322:	2e 5f       	subi	r18, 0xFE	; 254
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	42 17       	cp	r20, r18
    1328:	53 07       	cpc	r21, r19
    132a:	31 f4       	brne	.+12     	; 0x1338 <xTaskIncrementTick+0x132>
    132c:	40 85       	ldd	r20, Z+8	; 0x08
    132e:	51 85       	ldd	r21, Z+9	; 0x09
    1330:	12 96       	adiw	r26, 0x02	; 2
    1332:	5c 93       	st	X, r21
    1334:	4e 93       	st	-X, r20
    1336:	11 97       	sbiw	r26, 0x01	; 1
    1338:	15 86       	std	Z+13, r1	; 0x0d
    133a:	14 86       	std	Z+12, r1	; 0x0c
    133c:	9c 91       	ld	r25, X
    133e:	91 50       	subi	r25, 0x01	; 1
    1340:	9c 93       	st	X, r25
    1342:	a0 8d       	ldd	r26, Z+24	; 0x18
    1344:	b1 8d       	ldd	r27, Z+25	; 0x19
    1346:	10 97       	sbiw	r26, 0x00	; 0
    1348:	09 f1       	breq	.+66     	; 0x138c <xTaskIncrementTick+0x186>
    134a:	c2 89       	ldd	r28, Z+18	; 0x12
    134c:	d3 89       	ldd	r29, Z+19	; 0x13
    134e:	44 89       	ldd	r20, Z+20	; 0x14
    1350:	55 89       	ldd	r21, Z+21	; 0x15
    1352:	5f 83       	std	Y+7, r21	; 0x07
    1354:	4e 83       	std	Y+6, r20	; 0x06
    1356:	c4 89       	ldd	r28, Z+20	; 0x14
    1358:	d5 89       	ldd	r29, Z+21	; 0x15
    135a:	42 89       	ldd	r20, Z+18	; 0x12
    135c:	53 89       	ldd	r21, Z+19	; 0x13
    135e:	5d 83       	std	Y+5, r21	; 0x05
    1360:	4c 83       	std	Y+4, r20	; 0x04
    1362:	11 96       	adiw	r26, 0x01	; 1
    1364:	6d 91       	ld	r22, X+
    1366:	7c 91       	ld	r23, X
    1368:	12 97       	sbiw	r26, 0x02	; 2
    136a:	af 01       	movw	r20, r30
    136c:	42 5f       	subi	r20, 0xF2	; 242
    136e:	5f 4f       	sbci	r21, 0xFF	; 255
    1370:	64 17       	cp	r22, r20
    1372:	75 07       	cpc	r23, r21
    1374:	31 f4       	brne	.+12     	; 0x1382 <xTaskIncrementTick+0x17c>
    1376:	44 89       	ldd	r20, Z+20	; 0x14
    1378:	55 89       	ldd	r21, Z+21	; 0x15
    137a:	12 96       	adiw	r26, 0x02	; 2
    137c:	5c 93       	st	X, r21
    137e:	4e 93       	st	-X, r20
    1380:	11 97       	sbiw	r26, 0x01	; 1
    1382:	11 8e       	std	Z+25, r1	; 0x19
    1384:	10 8e       	std	Z+24, r1	; 0x18
    1386:	9c 91       	ld	r25, X
    1388:	91 50       	subi	r25, 0x01	; 1
    138a:	9c 93       	st	X, r25
    138c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    138e:	90 91 e5 0f 	lds	r25, 0x0FE5	; 0x800fe5 <uxTopReadyPriority>
    1392:	9a 17       	cp	r25, r26
    1394:	10 f4       	brcc	.+4      	; 0x139a <xTaskIncrementTick+0x194>
    1396:	a0 93 e5 0f 	sts	0x0FE5, r26	; 0x800fe5 <uxTopReadyPriority>
    139a:	9b e0       	ldi	r25, 0x0B	; 11
    139c:	9a 9f       	mul	r25, r26
    139e:	d0 01       	movw	r26, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	a9 5d       	subi	r26, 0xD9	; 217
    13a4:	bf 4e       	sbci	r27, 0xEF	; 239
    13a6:	11 96       	adiw	r26, 0x01	; 1
    13a8:	0d 90       	ld	r0, X+
    13aa:	bc 91       	ld	r27, X
    13ac:	a0 2d       	mov	r26, r0
    13ae:	b7 83       	std	Z+7, r27	; 0x07
    13b0:	a6 83       	std	Z+6, r26	; 0x06
    13b2:	16 96       	adiw	r26, 0x06	; 6
    13b4:	4d 91       	ld	r20, X+
    13b6:	5c 91       	ld	r21, X
    13b8:	17 97       	sbiw	r26, 0x07	; 7
    13ba:	51 87       	std	Z+9, r21	; 0x09
    13bc:	40 87       	std	Z+8, r20	; 0x08
    13be:	16 96       	adiw	r26, 0x06	; 6
    13c0:	cd 91       	ld	r28, X+
    13c2:	dc 91       	ld	r29, X
    13c4:	17 97       	sbiw	r26, 0x07	; 7
    13c6:	3d 83       	std	Y+5, r19	; 0x05
    13c8:	2c 83       	std	Y+4, r18	; 0x04
    13ca:	17 96       	adiw	r26, 0x07	; 7
    13cc:	3c 93       	st	X, r19
    13ce:	2e 93       	st	-X, r18
    13d0:	16 97       	sbiw	r26, 0x06	; 6
    13d2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    13d4:	9a 9f       	mul	r25, r26
    13d6:	d0 01       	movw	r26, r0
    13d8:	11 24       	eor	r1, r1
    13da:	a9 5d       	subi	r26, 0xD9	; 217
    13dc:	bf 4e       	sbci	r27, 0xEF	; 239
    13de:	b5 87       	std	Z+13, r27	; 0x0d
    13e0:	a4 87       	std	Z+12, r26	; 0x0c
    13e2:	9c 91       	ld	r25, X
    13e4:	9f 5f       	subi	r25, 0xFF	; 255
    13e6:	9c 93       	st	X, r25
    13e8:	22 8d       	ldd	r18, Z+26	; 0x1a
    13ea:	e0 91 95 10 	lds	r30, 0x1095	; 0x801095 <pxCurrentTCB>
    13ee:	f0 91 96 10 	lds	r31, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    13f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    13f4:	29 17       	cp	r18, r25
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <xTaskIncrementTick+0x1f4>
    13f8:	4f cf       	rjmp	.-354    	; 0x1298 <xTaskIncrementTick+0x92>
    13fa:	51 cf       	rjmp	.-350    	; 0x129e <xTaskIncrementTick+0x98>
    13fc:	e0 91 95 10 	lds	r30, 0x1095	; 0x801095 <pxCurrentTCB>
    1400:	f0 91 96 10 	lds	r31, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1404:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1406:	9b e0       	ldi	r25, 0x0B	; 11
    1408:	e9 9f       	mul	r30, r25
    140a:	f0 01       	movw	r30, r0
    140c:	11 24       	eor	r1, r1
    140e:	e9 5d       	subi	r30, 0xD9	; 217
    1410:	ff 4e       	sbci	r31, 0xEF	; 239
    1412:	90 81       	ld	r25, Z
    1414:	92 30       	cpi	r25, 0x02	; 2
    1416:	08 f0       	brcs	.+2      	; 0x141a <xTaskIncrementTick+0x214>
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 91 df 0f 	lds	r25, 0x0FDF	; 0x800fdf <xYieldPending>
    141e:	91 11       	cpse	r25, r1
    1420:	16 c0       	rjmp	.+44     	; 0x144e <xTaskIncrementTick+0x248>
    1422:	16 c0       	rjmp	.+44     	; 0x1450 <xTaskIncrementTick+0x24a>
    1424:	80 91 e0 0f 	lds	r24, 0x0FE0	; 0x800fe0 <xPendedTicks>
    1428:	90 91 e1 0f 	lds	r25, 0x0FE1	; 0x800fe1 <xPendedTicks+0x1>
    142c:	a0 91 e2 0f 	lds	r26, 0x0FE2	; 0x800fe2 <xPendedTicks+0x2>
    1430:	b0 91 e3 0f 	lds	r27, 0x0FE3	; 0x800fe3 <xPendedTicks+0x3>
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	a1 1d       	adc	r26, r1
    1438:	b1 1d       	adc	r27, r1
    143a:	80 93 e0 0f 	sts	0x0FE0, r24	; 0x800fe0 <xPendedTicks>
    143e:	90 93 e1 0f 	sts	0x0FE1, r25	; 0x800fe1 <xPendedTicks+0x1>
    1442:	a0 93 e2 0f 	sts	0x0FE2, r26	; 0x800fe2 <xPendedTicks+0x2>
    1446:	b0 93 e3 0f 	sts	0x0FE3, r27	; 0x800fe3 <xPendedTicks+0x3>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <xTaskIncrementTick+0x24a>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	08 95       	ret

0000145e <xTaskResumeAll>:
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	0f 92       	push	r0
    1470:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <uxSchedulerSuspended>
    1474:	81 50       	subi	r24, 0x01	; 1
    1476:	80 93 d6 0f 	sts	0x0FD6, r24	; 0x800fd6 <uxSchedulerSuspended>
    147a:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <uxSchedulerSuspended>
    147e:	81 11       	cpse	r24, r1
    1480:	be c0       	rjmp	.+380    	; 0x15fe <xTaskResumeAll+0x1a0>
    1482:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <uxCurrentNumberOfTasks>
    1486:	81 11       	cpse	r24, r1
    1488:	88 c0       	rjmp	.+272    	; 0x159a <xTaskResumeAll+0x13c>
    148a:	bc c0       	rjmp	.+376    	; 0x1604 <xTaskResumeAll+0x1a6>
    148c:	e0 91 09 10 	lds	r30, 0x1009	; 0x801009 <xPendingReadyList+0x7>
    1490:	f0 91 0a 10 	lds	r31, 0x100A	; 0x80100a <xPendingReadyList+0x8>
    1494:	00 84       	ldd	r0, Z+8	; 0x08
    1496:	f1 85       	ldd	r31, Z+9	; 0x09
    1498:	e0 2d       	mov	r30, r0
    149a:	a0 8d       	ldd	r26, Z+24	; 0x18
    149c:	b1 8d       	ldd	r27, Z+25	; 0x19
    149e:	c2 89       	ldd	r28, Z+18	; 0x12
    14a0:	d3 89       	ldd	r29, Z+19	; 0x13
    14a2:	84 89       	ldd	r24, Z+20	; 0x14
    14a4:	95 89       	ldd	r25, Z+21	; 0x15
    14a6:	9f 83       	std	Y+7, r25	; 0x07
    14a8:	8e 83       	std	Y+6, r24	; 0x06
    14aa:	c4 89       	ldd	r28, Z+20	; 0x14
    14ac:	d5 89       	ldd	r29, Z+21	; 0x15
    14ae:	82 89       	ldd	r24, Z+18	; 0x12
    14b0:	93 89       	ldd	r25, Z+19	; 0x13
    14b2:	9d 83       	std	Y+5, r25	; 0x05
    14b4:	8c 83       	std	Y+4, r24	; 0x04
    14b6:	11 96       	adiw	r26, 0x01	; 1
    14b8:	2d 91       	ld	r18, X+
    14ba:	3c 91       	ld	r19, X
    14bc:	12 97       	sbiw	r26, 0x02	; 2
    14be:	cf 01       	movw	r24, r30
    14c0:	0e 96       	adiw	r24, 0x0e	; 14
    14c2:	28 17       	cp	r18, r24
    14c4:	39 07       	cpc	r19, r25
    14c6:	31 f4       	brne	.+12     	; 0x14d4 <xTaskResumeAll+0x76>
    14c8:	84 89       	ldd	r24, Z+20	; 0x14
    14ca:	95 89       	ldd	r25, Z+21	; 0x15
    14cc:	12 96       	adiw	r26, 0x02	; 2
    14ce:	9c 93       	st	X, r25
    14d0:	8e 93       	st	-X, r24
    14d2:	11 97       	sbiw	r26, 0x01	; 1
    14d4:	11 8e       	std	Z+25, r1	; 0x19
    14d6:	10 8e       	std	Z+24, r1	; 0x18
    14d8:	8c 91       	ld	r24, X
    14da:	81 50       	subi	r24, 0x01	; 1
    14dc:	8c 93       	st	X, r24
    14de:	a4 85       	ldd	r26, Z+12	; 0x0c
    14e0:	b5 85       	ldd	r27, Z+13	; 0x0d
    14e2:	c6 81       	ldd	r28, Z+6	; 0x06
    14e4:	d7 81       	ldd	r29, Z+7	; 0x07
    14e6:	80 85       	ldd	r24, Z+8	; 0x08
    14e8:	91 85       	ldd	r25, Z+9	; 0x09
    14ea:	9f 83       	std	Y+7, r25	; 0x07
    14ec:	8e 83       	std	Y+6, r24	; 0x06
    14ee:	c0 85       	ldd	r28, Z+8	; 0x08
    14f0:	d1 85       	ldd	r29, Z+9	; 0x09
    14f2:	86 81       	ldd	r24, Z+6	; 0x06
    14f4:	97 81       	ldd	r25, Z+7	; 0x07
    14f6:	9d 83       	std	Y+5, r25	; 0x05
    14f8:	8c 83       	std	Y+4, r24	; 0x04
    14fa:	11 96       	adiw	r26, 0x01	; 1
    14fc:	8d 91       	ld	r24, X+
    14fe:	9c 91       	ld	r25, X
    1500:	12 97       	sbiw	r26, 0x02	; 2
    1502:	9f 01       	movw	r18, r30
    1504:	2e 5f       	subi	r18, 0xFE	; 254
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
    1508:	82 17       	cp	r24, r18
    150a:	93 07       	cpc	r25, r19
    150c:	31 f4       	brne	.+12     	; 0x151a <xTaskResumeAll+0xbc>
    150e:	80 85       	ldd	r24, Z+8	; 0x08
    1510:	91 85       	ldd	r25, Z+9	; 0x09
    1512:	12 96       	adiw	r26, 0x02	; 2
    1514:	9c 93       	st	X, r25
    1516:	8e 93       	st	-X, r24
    1518:	11 97       	sbiw	r26, 0x01	; 1
    151a:	15 86       	std	Z+13, r1	; 0x0d
    151c:	14 86       	std	Z+12, r1	; 0x0c
    151e:	8c 91       	ld	r24, X
    1520:	81 50       	subi	r24, 0x01	; 1
    1522:	8c 93       	st	X, r24
    1524:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1526:	80 91 e5 0f 	lds	r24, 0x0FE5	; 0x800fe5 <uxTopReadyPriority>
    152a:	8a 17       	cp	r24, r26
    152c:	10 f4       	brcc	.+4      	; 0x1532 <xTaskResumeAll+0xd4>
    152e:	a0 93 e5 0f 	sts	0x0FE5, r26	; 0x800fe5 <uxTopReadyPriority>
    1532:	8b e0       	ldi	r24, 0x0B	; 11
    1534:	8a 9f       	mul	r24, r26
    1536:	d0 01       	movw	r26, r0
    1538:	11 24       	eor	r1, r1
    153a:	a9 5d       	subi	r26, 0xD9	; 217
    153c:	bf 4e       	sbci	r27, 0xEF	; 239
    153e:	11 96       	adiw	r26, 0x01	; 1
    1540:	0d 90       	ld	r0, X+
    1542:	bc 91       	ld	r27, X
    1544:	a0 2d       	mov	r26, r0
    1546:	b7 83       	std	Z+7, r27	; 0x07
    1548:	a6 83       	std	Z+6, r26	; 0x06
    154a:	16 96       	adiw	r26, 0x06	; 6
    154c:	4d 91       	ld	r20, X+
    154e:	5c 91       	ld	r21, X
    1550:	17 97       	sbiw	r26, 0x07	; 7
    1552:	51 87       	std	Z+9, r21	; 0x09
    1554:	40 87       	std	Z+8, r20	; 0x08
    1556:	16 96       	adiw	r26, 0x06	; 6
    1558:	cd 91       	ld	r28, X+
    155a:	dc 91       	ld	r29, X
    155c:	17 97       	sbiw	r26, 0x07	; 7
    155e:	3d 83       	std	Y+5, r19	; 0x05
    1560:	2c 83       	std	Y+4, r18	; 0x04
    1562:	17 96       	adiw	r26, 0x07	; 7
    1564:	3c 93       	st	X, r19
    1566:	2e 93       	st	-X, r18
    1568:	16 97       	sbiw	r26, 0x06	; 6
    156a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    156c:	8a 9f       	mul	r24, r26
    156e:	d0 01       	movw	r26, r0
    1570:	11 24       	eor	r1, r1
    1572:	a9 5d       	subi	r26, 0xD9	; 217
    1574:	bf 4e       	sbci	r27, 0xEF	; 239
    1576:	b5 87       	std	Z+13, r27	; 0x0d
    1578:	a4 87       	std	Z+12, r26	; 0x0c
    157a:	8c 91       	ld	r24, X
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	8c 93       	st	X, r24
    1580:	92 8d       	ldd	r25, Z+26	; 0x1a
    1582:	a0 91 95 10 	lds	r26, 0x1095	; 0x801095 <pxCurrentTCB>
    1586:	b0 91 96 10 	lds	r27, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    158a:	5a 96       	adiw	r26, 0x1a	; 26
    158c:	8c 91       	ld	r24, X
    158e:	98 17       	cp	r25, r24
    1590:	30 f0       	brcs	.+12     	; 0x159e <xTaskResumeAll+0x140>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <xYieldPending>
    1598:	02 c0       	rjmp	.+4      	; 0x159e <xTaskResumeAll+0x140>
    159a:	e0 e0       	ldi	r30, 0x00	; 0
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <xPendingReadyList>
    15a2:	81 11       	cpse	r24, r1
    15a4:	73 cf       	rjmp	.-282    	; 0x148c <xTaskResumeAll+0x2e>
    15a6:	ef 2b       	or	r30, r31
    15a8:	09 f0       	breq	.+2      	; 0x15ac <xTaskResumeAll+0x14e>
    15aa:	92 db       	rcall	.-2268   	; 0xcd0 <prvResetNextTaskUnblockTime>
    15ac:	c0 90 e0 0f 	lds	r12, 0x0FE0	; 0x800fe0 <xPendedTicks>
    15b0:	d0 90 e1 0f 	lds	r13, 0x0FE1	; 0x800fe1 <xPendedTicks+0x1>
    15b4:	e0 90 e2 0f 	lds	r14, 0x0FE2	; 0x800fe2 <xPendedTicks+0x2>
    15b8:	f0 90 e3 0f 	lds	r15, 0x0FE3	; 0x800fe3 <xPendedTicks+0x3>
    15bc:	c1 14       	cp	r12, r1
    15be:	d1 04       	cpc	r13, r1
    15c0:	e1 04       	cpc	r14, r1
    15c2:	f1 04       	cpc	r15, r1
    15c4:	a1 f0       	breq	.+40     	; 0x15ee <xTaskResumeAll+0x190>
    15c6:	1f de       	rcall	.-962    	; 0x1206 <xTaskIncrementTick>
    15c8:	88 23       	and	r24, r24
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <xTaskResumeAll+0x174>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <xYieldPending>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	c8 1a       	sub	r12, r24
    15d6:	d1 08       	sbc	r13, r1
    15d8:	e1 08       	sbc	r14, r1
    15da:	f1 08       	sbc	r15, r1
    15dc:	a1 f7       	brne	.-24     	; 0x15c6 <xTaskResumeAll+0x168>
    15de:	10 92 e0 0f 	sts	0x0FE0, r1	; 0x800fe0 <xPendedTicks>
    15e2:	10 92 e1 0f 	sts	0x0FE1, r1	; 0x800fe1 <xPendedTicks+0x1>
    15e6:	10 92 e2 0f 	sts	0x0FE2, r1	; 0x800fe2 <xPendedTicks+0x2>
    15ea:	10 92 e3 0f 	sts	0x0FE3, r1	; 0x800fe3 <xPendedTicks+0x3>
    15ee:	80 91 df 0f 	lds	r24, 0x0FDF	; 0x800fdf <xYieldPending>
    15f2:	88 23       	and	r24, r24
    15f4:	31 f0       	breq	.+12     	; 0x1602 <xTaskResumeAll+0x1a4>
    15f6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <vPortYield>
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <xTaskResumeAll+0x1a6>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <xTaskResumeAll+0x1a6>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	cf 90       	pop	r12
    1614:	08 95       	ret

00001616 <vTaskDelay>:
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	6b 01       	movw	r12, r22
    1620:	7c 01       	movw	r14, r24
    1622:	67 2b       	or	r22, r23
    1624:	68 2b       	or	r22, r24
    1626:	69 2b       	or	r22, r25
    1628:	39 f0       	breq	.+14     	; 0x1638 <vTaskDelay+0x22>
    162a:	d9 dd       	rcall	.-1102   	; 0x11de <vTaskSuspendAll>
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	c7 01       	movw	r24, r14
    1630:	b6 01       	movw	r22, r12
    1632:	b7 dc       	rcall	.-1682   	; 0xfa2 <prvAddCurrentTaskToDelayedList>
    1634:	14 df       	rcall	.-472    	; 0x145e <xTaskResumeAll>
    1636:	01 c0       	rjmp	.+2      	; 0x163a <vTaskDelay+0x24>
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	81 11       	cpse	r24, r1
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <vTaskDelay+0x2c>
    163e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <vPortYield>
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	08 95       	ret

0000164c <vTaskSwitchContext>:
    164c:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <uxSchedulerSuspended>
    1650:	88 23       	and	r24, r24
    1652:	21 f0       	breq	.+8      	; 0x165c <vTaskSwitchContext+0x10>
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <xYieldPending>
    165a:	08 95       	ret
    165c:	10 92 df 0f 	sts	0x0FDF, r1	; 0x800fdf <xYieldPending>
    1660:	e0 91 95 10 	lds	r30, 0x1095	; 0x801095 <pxCurrentTCB>
    1664:	f0 91 96 10 	lds	r31, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1668:	20 81       	ld	r18, Z
    166a:	31 81       	ldd	r19, Z+1	; 0x01
    166c:	e0 91 95 10 	lds	r30, 0x1095	; 0x801095 <pxCurrentTCB>
    1670:	f0 91 96 10 	lds	r31, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1674:	83 8d       	ldd	r24, Z+27	; 0x1b
    1676:	94 8d       	ldd	r25, Z+28	; 0x1c
    1678:	82 17       	cp	r24, r18
    167a:	93 07       	cpc	r25, r19
    167c:	58 f0       	brcs	.+22     	; 0x1694 <vTaskSwitchContext+0x48>
    167e:	60 91 95 10 	lds	r22, 0x1095	; 0x801095 <pxCurrentTCB>
    1682:	70 91 96 10 	lds	r23, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1686:	63 5e       	subi	r22, 0xE3	; 227
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	80 91 95 10 	lds	r24, 0x1095	; 0x801095 <pxCurrentTCB>
    168e:	90 91 96 10 	lds	r25, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1692:	3d d5       	rcall	.+2682   	; 0x210e <vApplicationStackOverflowHook>
    1694:	80 91 e5 0f 	lds	r24, 0x0FE5	; 0x800fe5 <uxTopReadyPriority>
    1698:	01 c0       	rjmp	.+2      	; 0x169c <vTaskSwitchContext+0x50>
    169a:	81 50       	subi	r24, 0x01	; 1
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	9b e0       	ldi	r25, 0x0B	; 11
    16a2:	92 9f       	mul	r25, r18
    16a4:	f0 01       	movw	r30, r0
    16a6:	93 9f       	mul	r25, r19
    16a8:	f0 0d       	add	r31, r0
    16aa:	11 24       	eor	r1, r1
    16ac:	e9 5d       	subi	r30, 0xD9	; 217
    16ae:	ff 4e       	sbci	r31, 0xEF	; 239
    16b0:	90 81       	ld	r25, Z
    16b2:	99 23       	and	r25, r25
    16b4:	91 f3       	breq	.-28     	; 0x169a <vTaskSwitchContext+0x4e>
    16b6:	9b e0       	ldi	r25, 0x0B	; 11
    16b8:	92 9f       	mul	r25, r18
    16ba:	a0 01       	movw	r20, r0
    16bc:	93 9f       	mul	r25, r19
    16be:	50 0d       	add	r21, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	df 01       	movw	r26, r30
    16c4:	01 80       	ldd	r0, Z+1	; 0x01
    16c6:	f2 81       	ldd	r31, Z+2	; 0x02
    16c8:	e0 2d       	mov	r30, r0
    16ca:	04 80       	ldd	r0, Z+4	; 0x04
    16cc:	f5 81       	ldd	r31, Z+5	; 0x05
    16ce:	e0 2d       	mov	r30, r0
    16d0:	12 96       	adiw	r26, 0x02	; 2
    16d2:	fc 93       	st	X, r31
    16d4:	ee 93       	st	-X, r30
    16d6:	11 97       	sbiw	r26, 0x01	; 1
    16d8:	46 5d       	subi	r20, 0xD6	; 214
    16da:	5f 4e       	sbci	r21, 0xEF	; 239
    16dc:	e4 17       	cp	r30, r20
    16de:	f5 07       	cpc	r31, r21
    16e0:	29 f4       	brne	.+10     	; 0x16ec <vTaskSwitchContext+0xa0>
    16e2:	44 81       	ldd	r20, Z+4	; 0x04
    16e4:	55 81       	ldd	r21, Z+5	; 0x05
    16e6:	fd 01       	movw	r30, r26
    16e8:	52 83       	std	Z+2, r21	; 0x02
    16ea:	41 83       	std	Z+1, r20	; 0x01
    16ec:	9b e0       	ldi	r25, 0x0B	; 11
    16ee:	92 9f       	mul	r25, r18
    16f0:	f0 01       	movw	r30, r0
    16f2:	93 9f       	mul	r25, r19
    16f4:	f0 0d       	add	r31, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	e9 5d       	subi	r30, 0xD9	; 217
    16fa:	ff 4e       	sbci	r31, 0xEF	; 239
    16fc:	01 80       	ldd	r0, Z+1	; 0x01
    16fe:	f2 81       	ldd	r31, Z+2	; 0x02
    1700:	e0 2d       	mov	r30, r0
    1702:	20 85       	ldd	r18, Z+8	; 0x08
    1704:	31 85       	ldd	r19, Z+9	; 0x09
    1706:	30 93 96 10 	sts	0x1096, r19	; 0x801096 <pxCurrentTCB+0x1>
    170a:	20 93 95 10 	sts	0x1095, r18	; 0x801095 <pxCurrentTCB>
    170e:	80 93 e5 0f 	sts	0x0FE5, r24	; 0x800fe5 <uxTopReadyPriority>
    1712:	08 95       	ret

00001714 <vTaskPlaceOnEventList>:
    1714:	cf 92       	push	r12
    1716:	df 92       	push	r13
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	6a 01       	movw	r12, r20
    171e:	7b 01       	movw	r14, r22
    1720:	60 91 95 10 	lds	r22, 0x1095	; 0x801095 <pxCurrentTCB>
    1724:	70 91 96 10 	lds	r23, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1728:	62 5f       	subi	r22, 0xF2	; 242
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    172c:	0e 94 23 02 	call	0x446	; 0x446 <vListInsert>
    1730:	41 e0       	ldi	r20, 0x01	; 1
    1732:	c7 01       	movw	r24, r14
    1734:	b6 01       	movw	r22, r12
    1736:	35 dc       	rcall	.-1942   	; 0xfa2 <prvAddCurrentTaskToDelayedList>
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	08 95       	ret

00001742 <vTaskPlaceOnEventListRestricted>:
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	fc 01       	movw	r30, r24
    1748:	cb 01       	movw	r24, r22
    174a:	ba 01       	movw	r22, r20
    174c:	a1 81       	ldd	r26, Z+1	; 0x01
    174e:	b2 81       	ldd	r27, Z+2	; 0x02
    1750:	c0 91 95 10 	lds	r28, 0x1095	; 0x801095 <pxCurrentTCB>
    1754:	d0 91 96 10 	lds	r29, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1758:	bb 8b       	std	Y+19, r27	; 0x13
    175a:	aa 8b       	std	Y+18, r26	; 0x12
    175c:	c0 91 95 10 	lds	r28, 0x1095	; 0x801095 <pxCurrentTCB>
    1760:	d0 91 96 10 	lds	r29, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1764:	16 96       	adiw	r26, 0x06	; 6
    1766:	4d 91       	ld	r20, X+
    1768:	5c 91       	ld	r21, X
    176a:	17 97       	sbiw	r26, 0x07	; 7
    176c:	5d 8b       	std	Y+21, r21	; 0x15
    176e:	4c 8b       	std	Y+20, r20	; 0x14
    1770:	16 96       	adiw	r26, 0x06	; 6
    1772:	cd 91       	ld	r28, X+
    1774:	dc 91       	ld	r29, X
    1776:	17 97       	sbiw	r26, 0x07	; 7
    1778:	40 91 95 10 	lds	r20, 0x1095	; 0x801095 <pxCurrentTCB>
    177c:	50 91 96 10 	lds	r21, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1780:	42 5f       	subi	r20, 0xF2	; 242
    1782:	5f 4f       	sbci	r21, 0xFF	; 255
    1784:	5d 83       	std	Y+5, r21	; 0x05
    1786:	4c 83       	std	Y+4, r20	; 0x04
    1788:	40 91 95 10 	lds	r20, 0x1095	; 0x801095 <pxCurrentTCB>
    178c:	50 91 96 10 	lds	r21, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    1790:	42 5f       	subi	r20, 0xF2	; 242
    1792:	5f 4f       	sbci	r21, 0xFF	; 255
    1794:	17 96       	adiw	r26, 0x07	; 7
    1796:	5c 93       	st	X, r21
    1798:	4e 93       	st	-X, r20
    179a:	16 97       	sbiw	r26, 0x06	; 6
    179c:	a0 91 95 10 	lds	r26, 0x1095	; 0x801095 <pxCurrentTCB>
    17a0:	b0 91 96 10 	lds	r27, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    17a4:	59 96       	adiw	r26, 0x19	; 25
    17a6:	fc 93       	st	X, r31
    17a8:	ee 93       	st	-X, r30
    17aa:	58 97       	sbiw	r26, 0x18	; 24
    17ac:	30 81       	ld	r19, Z
    17ae:	3f 5f       	subi	r19, 0xFF	; 255
    17b0:	30 83       	st	Z, r19
    17b2:	22 23       	and	r18, r18
    17b4:	19 f0       	breq	.+6      	; 0x17bc <vTaskPlaceOnEventListRestricted+0x7a>
    17b6:	6f ef       	ldi	r22, 0xFF	; 255
    17b8:	7f ef       	ldi	r23, 0xFF	; 255
    17ba:	cb 01       	movw	r24, r22
    17bc:	42 2f       	mov	r20, r18
    17be:	f1 db       	rcall	.-2078   	; 0xfa2 <prvAddCurrentTaskToDelayedList>
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret

000017c6 <xTaskRemoveFromEventList>:
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	dc 01       	movw	r26, r24
    17cc:	17 96       	adiw	r26, 0x07	; 7
    17ce:	ed 91       	ld	r30, X+
    17d0:	fc 91       	ld	r31, X
    17d2:	18 97       	sbiw	r26, 0x08	; 8
    17d4:	00 84       	ldd	r0, Z+8	; 0x08
    17d6:	f1 85       	ldd	r31, Z+9	; 0x09
    17d8:	e0 2d       	mov	r30, r0
    17da:	a0 8d       	ldd	r26, Z+24	; 0x18
    17dc:	b1 8d       	ldd	r27, Z+25	; 0x19
    17de:	c2 89       	ldd	r28, Z+18	; 0x12
    17e0:	d3 89       	ldd	r29, Z+19	; 0x13
    17e2:	84 89       	ldd	r24, Z+20	; 0x14
    17e4:	95 89       	ldd	r25, Z+21	; 0x15
    17e6:	9f 83       	std	Y+7, r25	; 0x07
    17e8:	8e 83       	std	Y+6, r24	; 0x06
    17ea:	c4 89       	ldd	r28, Z+20	; 0x14
    17ec:	d5 89       	ldd	r29, Z+21	; 0x15
    17ee:	82 89       	ldd	r24, Z+18	; 0x12
    17f0:	93 89       	ldd	r25, Z+19	; 0x13
    17f2:	9d 83       	std	Y+5, r25	; 0x05
    17f4:	8c 83       	std	Y+4, r24	; 0x04
    17f6:	11 96       	adiw	r26, 0x01	; 1
    17f8:	8d 91       	ld	r24, X+
    17fa:	9c 91       	ld	r25, X
    17fc:	12 97       	sbiw	r26, 0x02	; 2
    17fe:	9f 01       	movw	r18, r30
    1800:	22 5f       	subi	r18, 0xF2	; 242
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
    1804:	82 17       	cp	r24, r18
    1806:	93 07       	cpc	r25, r19
    1808:	31 f4       	brne	.+12     	; 0x1816 <xTaskRemoveFromEventList+0x50>
    180a:	84 89       	ldd	r24, Z+20	; 0x14
    180c:	95 89       	ldd	r25, Z+21	; 0x15
    180e:	12 96       	adiw	r26, 0x02	; 2
    1810:	9c 93       	st	X, r25
    1812:	8e 93       	st	-X, r24
    1814:	11 97       	sbiw	r26, 0x01	; 1
    1816:	11 8e       	std	Z+25, r1	; 0x19
    1818:	10 8e       	std	Z+24, r1	; 0x18
    181a:	8c 91       	ld	r24, X
    181c:	81 50       	subi	r24, 0x01	; 1
    181e:	8c 93       	st	X, r24
    1820:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <uxSchedulerSuspended>
    1824:	81 11       	cpse	r24, r1
    1826:	52 c0       	rjmp	.+164    	; 0x18cc <xTaskRemoveFromEventList+0x106>
    1828:	a4 85       	ldd	r26, Z+12	; 0x0c
    182a:	b5 85       	ldd	r27, Z+13	; 0x0d
    182c:	c6 81       	ldd	r28, Z+6	; 0x06
    182e:	d7 81       	ldd	r29, Z+7	; 0x07
    1830:	80 85       	ldd	r24, Z+8	; 0x08
    1832:	91 85       	ldd	r25, Z+9	; 0x09
    1834:	9f 83       	std	Y+7, r25	; 0x07
    1836:	8e 83       	std	Y+6, r24	; 0x06
    1838:	c0 85       	ldd	r28, Z+8	; 0x08
    183a:	d1 85       	ldd	r29, Z+9	; 0x09
    183c:	86 81       	ldd	r24, Z+6	; 0x06
    183e:	97 81       	ldd	r25, Z+7	; 0x07
    1840:	9d 83       	std	Y+5, r25	; 0x05
    1842:	8c 83       	std	Y+4, r24	; 0x04
    1844:	11 96       	adiw	r26, 0x01	; 1
    1846:	8d 91       	ld	r24, X+
    1848:	9c 91       	ld	r25, X
    184a:	12 97       	sbiw	r26, 0x02	; 2
    184c:	9f 01       	movw	r18, r30
    184e:	2e 5f       	subi	r18, 0xFE	; 254
    1850:	3f 4f       	sbci	r19, 0xFF	; 255
    1852:	82 17       	cp	r24, r18
    1854:	93 07       	cpc	r25, r19
    1856:	31 f4       	brne	.+12     	; 0x1864 <xTaskRemoveFromEventList+0x9e>
    1858:	80 85       	ldd	r24, Z+8	; 0x08
    185a:	91 85       	ldd	r25, Z+9	; 0x09
    185c:	12 96       	adiw	r26, 0x02	; 2
    185e:	9c 93       	st	X, r25
    1860:	8e 93       	st	-X, r24
    1862:	11 97       	sbiw	r26, 0x01	; 1
    1864:	15 86       	std	Z+13, r1	; 0x0d
    1866:	14 86       	std	Z+12, r1	; 0x0c
    1868:	8c 91       	ld	r24, X
    186a:	81 50       	subi	r24, 0x01	; 1
    186c:	8c 93       	st	X, r24
    186e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1870:	80 91 e5 0f 	lds	r24, 0x0FE5	; 0x800fe5 <uxTopReadyPriority>
    1874:	8a 17       	cp	r24, r26
    1876:	10 f4       	brcc	.+4      	; 0x187c <xTaskRemoveFromEventList+0xb6>
    1878:	a0 93 e5 0f 	sts	0x0FE5, r26	; 0x800fe5 <uxTopReadyPriority>
    187c:	8b e0       	ldi	r24, 0x0B	; 11
    187e:	8a 9f       	mul	r24, r26
    1880:	d0 01       	movw	r26, r0
    1882:	11 24       	eor	r1, r1
    1884:	a9 5d       	subi	r26, 0xD9	; 217
    1886:	bf 4e       	sbci	r27, 0xEF	; 239
    1888:	11 96       	adiw	r26, 0x01	; 1
    188a:	0d 90       	ld	r0, X+
    188c:	bc 91       	ld	r27, X
    188e:	a0 2d       	mov	r26, r0
    1890:	b7 83       	std	Z+7, r27	; 0x07
    1892:	a6 83       	std	Z+6, r26	; 0x06
    1894:	16 96       	adiw	r26, 0x06	; 6
    1896:	4d 91       	ld	r20, X+
    1898:	5c 91       	ld	r21, X
    189a:	17 97       	sbiw	r26, 0x07	; 7
    189c:	51 87       	std	Z+9, r21	; 0x09
    189e:	40 87       	std	Z+8, r20	; 0x08
    18a0:	16 96       	adiw	r26, 0x06	; 6
    18a2:	cd 91       	ld	r28, X+
    18a4:	dc 91       	ld	r29, X
    18a6:	17 97       	sbiw	r26, 0x07	; 7
    18a8:	3d 83       	std	Y+5, r19	; 0x05
    18aa:	2c 83       	std	Y+4, r18	; 0x04
    18ac:	17 96       	adiw	r26, 0x07	; 7
    18ae:	3c 93       	st	X, r19
    18b0:	2e 93       	st	-X, r18
    18b2:	16 97       	sbiw	r26, 0x06	; 6
    18b4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    18b6:	8a 9f       	mul	r24, r26
    18b8:	d0 01       	movw	r26, r0
    18ba:	11 24       	eor	r1, r1
    18bc:	a9 5d       	subi	r26, 0xD9	; 217
    18be:	bf 4e       	sbci	r27, 0xEF	; 239
    18c0:	b5 87       	std	Z+13, r27	; 0x0d
    18c2:	a4 87       	std	Z+12, r26	; 0x0c
    18c4:	8c 91       	ld	r24, X
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	8c 93       	st	X, r24
    18ca:	1c c0       	rjmp	.+56     	; 0x1904 <xTaskRemoveFromEventList+0x13e>
    18cc:	42 e0       	ldi	r20, 0x02	; 2
    18ce:	50 e1       	ldi	r21, 0x10	; 16
    18d0:	da 01       	movw	r26, r20
    18d2:	11 96       	adiw	r26, 0x01	; 1
    18d4:	cd 91       	ld	r28, X+
    18d6:	dc 91       	ld	r29, X
    18d8:	12 97       	sbiw	r26, 0x02	; 2
    18da:	d3 8b       	std	Z+19, r29	; 0x13
    18dc:	c2 8b       	std	Z+18, r28	; 0x12
    18de:	8e 81       	ldd	r24, Y+6	; 0x06
    18e0:	9f 81       	ldd	r25, Y+7	; 0x07
    18e2:	95 8b       	std	Z+21, r25	; 0x15
    18e4:	84 8b       	std	Z+20, r24	; 0x14
    18e6:	8e 81       	ldd	r24, Y+6	; 0x06
    18e8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ea:	dc 01       	movw	r26, r24
    18ec:	15 96       	adiw	r26, 0x05	; 5
    18ee:	3c 93       	st	X, r19
    18f0:	2e 93       	st	-X, r18
    18f2:	14 97       	sbiw	r26, 0x04	; 4
    18f4:	3f 83       	std	Y+7, r19	; 0x07
    18f6:	2e 83       	std	Y+6, r18	; 0x06
    18f8:	51 8f       	std	Z+25, r21	; 0x19
    18fa:	40 8f       	std	Z+24, r20	; 0x18
    18fc:	da 01       	movw	r26, r20
    18fe:	8c 91       	ld	r24, X
    1900:	8f 5f       	subi	r24, 0xFF	; 255
    1902:	8c 93       	st	X, r24
    1904:	92 8d       	ldd	r25, Z+26	; 0x1a
    1906:	e0 91 95 10 	lds	r30, 0x1095	; 0x801095 <pxCurrentTCB>
    190a:	f0 91 96 10 	lds	r31, 0x1096	; 0x801096 <pxCurrentTCB+0x1>
    190e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1910:	89 17       	cp	r24, r25
    1912:	20 f4       	brcc	.+8      	; 0x191c <xTaskRemoveFromEventList+0x156>
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <xYieldPending>
    191a:	01 c0       	rjmp	.+2      	; 0x191e <xTaskRemoveFromEventList+0x158>
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <vTaskInternalSetTimeOutState>:
    1924:	20 91 de 0f 	lds	r18, 0x0FDE	; 0x800fde <xNumOfOverflows>
    1928:	fc 01       	movw	r30, r24
    192a:	20 83       	st	Z, r18
    192c:	40 91 e6 0f 	lds	r20, 0x0FE6	; 0x800fe6 <xTickCount>
    1930:	50 91 e7 0f 	lds	r21, 0x0FE7	; 0x800fe7 <xTickCount+0x1>
    1934:	60 91 e8 0f 	lds	r22, 0x0FE8	; 0x800fe8 <xTickCount+0x2>
    1938:	70 91 e9 0f 	lds	r23, 0x0FE9	; 0x800fe9 <xTickCount+0x3>
    193c:	41 83       	std	Z+1, r20	; 0x01
    193e:	52 83       	std	Z+2, r21	; 0x02
    1940:	63 83       	std	Z+3, r22	; 0x03
    1942:	74 83       	std	Z+4, r23	; 0x04
    1944:	08 95       	ret

00001946 <xTaskCheckForTimeOut>:
    1946:	8f 92       	push	r8
    1948:	9f 92       	push	r9
    194a:	af 92       	push	r10
    194c:	bf 92       	push	r11
    194e:	cf 92       	push	r12
    1950:	df 92       	push	r13
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	fb 01       	movw	r30, r22
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	0f 92       	push	r0
    1966:	c0 90 e6 0f 	lds	r12, 0x0FE6	; 0x800fe6 <xTickCount>
    196a:	d0 90 e7 0f 	lds	r13, 0x0FE7	; 0x800fe7 <xTickCount+0x1>
    196e:	e0 90 e8 0f 	lds	r14, 0x0FE8	; 0x800fe8 <xTickCount+0x2>
    1972:	f0 90 e9 0f 	lds	r15, 0x0FE9	; 0x800fe9 <xTickCount+0x3>
    1976:	dc 01       	movw	r26, r24
    1978:	11 96       	adiw	r26, 0x01	; 1
    197a:	0d 91       	ld	r16, X+
    197c:	1d 91       	ld	r17, X+
    197e:	2d 91       	ld	r18, X+
    1980:	3c 91       	ld	r19, X
    1982:	14 97       	sbiw	r26, 0x04	; 4
    1984:	46 01       	movw	r8, r12
    1986:	57 01       	movw	r10, r14
    1988:	80 1a       	sub	r8, r16
    198a:	91 0a       	sbc	r9, r17
    198c:	a2 0a       	sbc	r10, r18
    198e:	b3 0a       	sbc	r11, r19
    1990:	40 81       	ld	r20, Z
    1992:	51 81       	ldd	r21, Z+1	; 0x01
    1994:	62 81       	ldd	r22, Z+2	; 0x02
    1996:	73 81       	ldd	r23, Z+3	; 0x03
    1998:	4f 3f       	cpi	r20, 0xFF	; 255
    199a:	bf ef       	ldi	r27, 0xFF	; 255
    199c:	5b 07       	cpc	r21, r27
    199e:	6b 07       	cpc	r22, r27
    19a0:	7b 07       	cpc	r23, r27
    19a2:	39 f1       	breq	.+78     	; 0x19f2 <xTaskCheckForTimeOut+0xac>
    19a4:	ec 01       	movw	r28, r24
    19a6:	b8 81       	ld	r27, Y
    19a8:	a0 91 de 0f 	lds	r26, 0x0FDE	; 0x800fde <xNumOfOverflows>
    19ac:	ba 17       	cp	r27, r26
    19ae:	59 f0       	breq	.+22     	; 0x19c6 <xTaskCheckForTimeOut+0x80>
    19b0:	c0 16       	cp	r12, r16
    19b2:	d1 06       	cpc	r13, r17
    19b4:	e2 06       	cpc	r14, r18
    19b6:	f3 06       	cpc	r15, r19
    19b8:	30 f0       	brcs	.+12     	; 0x19c6 <xTaskCheckForTimeOut+0x80>
    19ba:	10 82       	st	Z, r1
    19bc:	11 82       	std	Z+1, r1	; 0x01
    19be:	12 82       	std	Z+2, r1	; 0x02
    19c0:	13 82       	std	Z+3, r1	; 0x03
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	17 c0       	rjmp	.+46     	; 0x19f4 <xTaskCheckForTimeOut+0xae>
    19c6:	84 16       	cp	r8, r20
    19c8:	95 06       	cpc	r9, r21
    19ca:	a6 06       	cpc	r10, r22
    19cc:	b7 06       	cpc	r11, r23
    19ce:	58 f4       	brcc	.+22     	; 0x19e6 <xTaskCheckForTimeOut+0xa0>
    19d0:	48 19       	sub	r20, r8
    19d2:	59 09       	sbc	r21, r9
    19d4:	6a 09       	sbc	r22, r10
    19d6:	7b 09       	sbc	r23, r11
    19d8:	40 83       	st	Z, r20
    19da:	51 83       	std	Z+1, r21	; 0x01
    19dc:	62 83       	std	Z+2, r22	; 0x02
    19de:	73 83       	std	Z+3, r23	; 0x03
    19e0:	a1 df       	rcall	.-190    	; 0x1924 <vTaskInternalSetTimeOutState>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	07 c0       	rjmp	.+14     	; 0x19f4 <xTaskCheckForTimeOut+0xae>
    19e6:	10 82       	st	Z, r1
    19e8:	11 82       	std	Z+1, r1	; 0x01
    19ea:	12 82       	std	Z+2, r1	; 0x02
    19ec:	13 82       	std	Z+3, r1	; 0x03
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <xTaskCheckForTimeOut+0xae>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	df 90       	pop	r13
    1a06:	cf 90       	pop	r12
    1a08:	bf 90       	pop	r11
    1a0a:	af 90       	pop	r10
    1a0c:	9f 90       	pop	r9
    1a0e:	8f 90       	pop	r8
    1a10:	08 95       	ret

00001a12 <vTaskMissedYield>:
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <xYieldPending>
    1a18:	08 95       	ret

00001a1a <xTaskGetSchedulerState>:
    1a1a:	80 91 e4 0f 	lds	r24, 0x0FE4	; 0x800fe4 <xSchedulerRunning>
    1a1e:	88 23       	and	r24, r24
    1a20:	31 f0       	breq	.+12     	; 0x1a2e <xTaskGetSchedulerState+0x14>
    1a22:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <uxSchedulerSuspended>
    1a26:	81 11       	cpse	r24, r1
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <xTaskGetSchedulerState+0x18>
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	08 95       	ret
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	08 95       	ret
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	08 95       	ret

00001a36 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1a40:	89 2b       	or	r24, r25
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <xTaskPriorityDisinherit+0x10>
    1a44:	49 c0       	rjmp	.+146    	; 0x1ad8 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1a46:	86 a5       	ldd	r24, Z+46	; 0x2e
    1a48:	81 50       	subi	r24, 0x01	; 1
    1a4a:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1a4c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a4e:	95 a5       	ldd	r25, Z+45	; 0x2d
    1a50:	29 17       	cp	r18, r25
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <xTaskPriorityDisinherit+0x20>
    1a54:	43 c0       	rjmp	.+134    	; 0x1adc <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1a56:	81 11       	cpse	r24, r1
    1a58:	43 c0       	rjmp	.+134    	; 0x1ae0 <xTaskPriorityDisinherit+0xaa>
    1a5a:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1a5c:	8f 01       	movw	r16, r30
    1a5e:	0e 5f       	subi	r16, 0xFE	; 254
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
    1a62:	c8 01       	movw	r24, r16
    1a64:	0e 94 60 02 	call	0x4c0	; 0x4c0 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1a68:	ed a5       	ldd	r30, Y+45	; 0x2d
    1a6a:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a6c:	8a e0       	ldi	r24, 0x0A	; 10
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 e0       	ldi	r26, 0x00	; 0
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	8e 1b       	sub	r24, r30
    1a76:	91 09       	sbc	r25, r1
    1a78:	a1 09       	sbc	r26, r1
    1a7a:	b1 09       	sbc	r27, r1
    1a7c:	8e 87       	std	Y+14, r24	; 0x0e
    1a7e:	9f 87       	std	Y+15, r25	; 0x0f
    1a80:	a8 8b       	std	Y+16, r26	; 0x10
    1a82:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1a84:	80 91 e5 0f 	lds	r24, 0x0FE5	; 0x800fe5 <uxTopReadyPriority>
    1a88:	8e 17       	cp	r24, r30
    1a8a:	10 f4       	brcc	.+4      	; 0x1a90 <xTaskPriorityDisinherit+0x5a>
    1a8c:	e0 93 e5 0f 	sts	0x0FE5, r30	; 0x800fe5 <uxTopReadyPriority>
    1a90:	8b e0       	ldi	r24, 0x0B	; 11
    1a92:	8e 9f       	mul	r24, r30
    1a94:	f0 01       	movw	r30, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	e9 5d       	subi	r30, 0xD9	; 217
    1a9a:	ff 4e       	sbci	r31, 0xEF	; 239
    1a9c:	01 80       	ldd	r0, Z+1	; 0x01
    1a9e:	f2 81       	ldd	r31, Z+2	; 0x02
    1aa0:	e0 2d       	mov	r30, r0
    1aa2:	ff 83       	std	Y+7, r31	; 0x07
    1aa4:	ee 83       	std	Y+6, r30	; 0x06
    1aa6:	26 81       	ldd	r18, Z+6	; 0x06
    1aa8:	37 81       	ldd	r19, Z+7	; 0x07
    1aaa:	39 87       	std	Y+9, r19	; 0x09
    1aac:	28 87       	std	Y+8, r18	; 0x08
    1aae:	a6 81       	ldd	r26, Z+6	; 0x06
    1ab0:	b7 81       	ldd	r27, Z+7	; 0x07
    1ab2:	15 96       	adiw	r26, 0x05	; 5
    1ab4:	1c 93       	st	X, r17
    1ab6:	0e 93       	st	-X, r16
    1ab8:	14 97       	sbiw	r26, 0x04	; 4
    1aba:	17 83       	std	Z+7, r17	; 0x07
    1abc:	06 83       	std	Z+6, r16	; 0x06
    1abe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ac0:	8e 9f       	mul	r24, r30
    1ac2:	f0 01       	movw	r30, r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	e9 5d       	subi	r30, 0xD9	; 217
    1ac8:	ff 4e       	sbci	r31, 0xEF	; 239
    1aca:	fd 87       	std	Y+13, r31	; 0x0d
    1acc:	ec 87       	std	Y+12, r30	; 0x0c
    1ace:	80 81       	ld	r24, Z
    1ad0:	8f 5f       	subi	r24, 0xFF	; 255
    1ad2:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	05 c0       	rjmp	.+10     	; 0x1ae2 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <xTaskPriorityDisinherit+0xac>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	01 c0       	rjmp	.+2      	; 0x1ae2 <xTaskPriorityDisinherit+0xac>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <prvGetNextExpireTime>:
    1aec:	dc 01       	movw	r26, r24
    1aee:	e0 91 a1 10 	lds	r30, 0x10A1	; 0x8010a1 <pxCurrentTimerList>
    1af2:	f0 91 a2 10 	lds	r31, 0x10A2	; 0x8010a2 <pxCurrentTimerList+0x1>
    1af6:	80 81       	ld	r24, Z
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	81 11       	cpse	r24, r1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9c 93       	st	X, r25
    1b00:	91 11       	cpse	r25, r1
    1b02:	08 c0       	rjmp	.+16     	; 0x1b14 <prvGetNextExpireTime+0x28>
    1b04:	07 80       	ldd	r0, Z+7	; 0x07
    1b06:	f0 85       	ldd	r31, Z+8	; 0x08
    1b08:	e0 2d       	mov	r30, r0
    1b0a:	60 81       	ld	r22, Z
    1b0c:	71 81       	ldd	r23, Z+1	; 0x01
    1b0e:	82 81       	ldd	r24, Z+2	; 0x02
    1b10:	93 81       	ldd	r25, Z+3	; 0x03
    1b12:	08 95       	ret
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	cb 01       	movw	r24, r22
    1b1a:	08 95       	ret

00001b1c <prvInsertTimerInActiveList>:
    1b1c:	cf 92       	push	r12
    1b1e:	df 92       	push	r13
    1b20:	ef 92       	push	r14
    1b22:	ff 92       	push	r15
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    1b28:	fc 01       	movw	r30, r24
    1b2a:	42 83       	std	Z+2, r20	; 0x02
    1b2c:	53 83       	std	Z+3, r21	; 0x03
    1b2e:	64 83       	std	Z+4, r22	; 0x04
    1b30:	75 83       	std	Z+5, r23	; 0x05
    1b32:	93 87       	std	Z+11, r25	; 0x0b
    1b34:	82 87       	std	Z+10, r24	; 0x0a
    1b36:	04 17       	cp	r16, r20
    1b38:	15 07       	cpc	r17, r21
    1b3a:	26 07       	cpc	r18, r22
    1b3c:	37 07       	cpc	r19, r23
    1b3e:	c0 f0       	brcs	.+48     	; 0x1b70 <prvInsertTimerInActiveList+0x54>
    1b40:	0c 19       	sub	r16, r12
    1b42:	1d 09       	sbc	r17, r13
    1b44:	2e 09       	sbc	r18, r14
    1b46:	3f 09       	sbc	r19, r15
    1b48:	86 85       	ldd	r24, Z+14	; 0x0e
    1b4a:	97 85       	ldd	r25, Z+15	; 0x0f
    1b4c:	a0 89       	ldd	r26, Z+16	; 0x10
    1b4e:	b1 89       	ldd	r27, Z+17	; 0x11
    1b50:	08 17       	cp	r16, r24
    1b52:	19 07       	cpc	r17, r25
    1b54:	2a 07       	cpc	r18, r26
    1b56:	3b 07       	cpc	r19, r27
    1b58:	00 f5       	brcc	.+64     	; 0x1b9a <prvInsertTimerInActiveList+0x7e>
    1b5a:	bf 01       	movw	r22, r30
    1b5c:	6e 5f       	subi	r22, 0xFE	; 254
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b60:	80 91 9f 10 	lds	r24, 0x109F	; 0x80109f <pxOverflowTimerList>
    1b64:	90 91 a0 10 	lds	r25, 0x10A0	; 0x8010a0 <pxOverflowTimerList+0x1>
    1b68:	0e 94 23 02 	call	0x446	; 0x446 <vListInsert>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	18 c0       	rjmp	.+48     	; 0x1ba0 <prvInsertTimerInActiveList+0x84>
    1b70:	0c 15       	cp	r16, r12
    1b72:	1d 05       	cpc	r17, r13
    1b74:	2e 05       	cpc	r18, r14
    1b76:	3f 05       	cpc	r19, r15
    1b78:	28 f4       	brcc	.+10     	; 0x1b84 <prvInsertTimerInActiveList+0x68>
    1b7a:	4c 15       	cp	r20, r12
    1b7c:	5d 05       	cpc	r21, r13
    1b7e:	6e 05       	cpc	r22, r14
    1b80:	7f 05       	cpc	r23, r15
    1b82:	68 f4       	brcc	.+26     	; 0x1b9e <prvInsertTimerInActiveList+0x82>
    1b84:	bf 01       	movw	r22, r30
    1b86:	6e 5f       	subi	r22, 0xFE	; 254
    1b88:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8a:	80 91 a1 10 	lds	r24, 0x10A1	; 0x8010a1 <pxCurrentTimerList>
    1b8e:	90 91 a2 10 	lds	r25, 0x10A2	; 0x8010a2 <pxCurrentTimerList+0x1>
    1b92:	0e 94 23 02 	call	0x446	; 0x446 <vListInsert>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <prvInsertTimerInActiveList+0x84>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <prvInsertTimerInActiveList+0x84>
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
    1bac:	08 95       	ret

00001bae <prvCheckForValidListAndQueue>:
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	0f 92       	push	r0
    1bb4:	80 91 9d 10 	lds	r24, 0x109D	; 0x80109d <xTimerQueue>
    1bb8:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <xTimerQueue+0x1>
    1bbc:	89 2b       	or	r24, r25
    1bbe:	e9 f4       	brne	.+58     	; 0x1bfa <prvCheckForValidListAndQueue+0x4c>
    1bc0:	8e ea       	ldi	r24, 0xAE	; 174
    1bc2:	90 e1       	ldi	r25, 0x10	; 16
    1bc4:	0e 94 0e 02 	call	0x41c	; 0x41c <vListInitialise>
    1bc8:	83 ea       	ldi	r24, 0xA3	; 163
    1bca:	90 e1       	ldi	r25, 0x10	; 16
    1bcc:	0e 94 0e 02 	call	0x41c	; 0x41c <vListInitialise>
    1bd0:	8e ea       	ldi	r24, 0xAE	; 174
    1bd2:	90 e1       	ldi	r25, 0x10	; 16
    1bd4:	90 93 a2 10 	sts	0x10A2, r25	; 0x8010a2 <pxCurrentTimerList+0x1>
    1bd8:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <pxCurrentTimerList>
    1bdc:	83 ea       	ldi	r24, 0xA3	; 163
    1bde:	90 e1       	ldi	r25, 0x10	; 16
    1be0:	90 93 a0 10 	sts	0x10A0, r25	; 0x8010a0 <pxOverflowTimerList+0x1>
    1be4:	80 93 9f 10 	sts	0x109F, r24	; 0x80109f <pxOverflowTimerList>
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	67 e0       	ldi	r22, 0x07	; 7
    1bec:	8a e0       	ldi	r24, 0x0A	; 10
    1bee:	0e 94 bc 04 	call	0x978	; 0x978 <xQueueGenericCreate>
    1bf2:	90 93 9e 10 	sts	0x109E, r25	; 0x80109e <xTimerQueue+0x1>
    1bf6:	80 93 9d 10 	sts	0x109D, r24	; 0x80109d <xTimerQueue>
    1bfa:	0f 90       	pop	r0
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	08 95       	ret

00001c00 <xTimerCreateTimerTask>:
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	d3 df       	rcall	.-90     	; 0x1bae <prvCheckForValidListAndQueue>
    1c08:	80 91 9d 10 	lds	r24, 0x109D	; 0x80109d <xTimerQueue>
    1c0c:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <xTimerQueue+0x1>
    1c10:	89 2b       	or	r24, r25
    1c12:	89 f0       	breq	.+34     	; 0x1c36 <xTimerCreateTimerTask+0x36>
    1c14:	0f 2e       	mov	r0, r31
    1c16:	fb e9       	ldi	r31, 0x9B	; 155
    1c18:	ef 2e       	mov	r14, r31
    1c1a:	f0 e1       	ldi	r31, 0x10	; 16
    1c1c:	ff 2e       	mov	r15, r31
    1c1e:	f0 2d       	mov	r31, r0
    1c20:	03 e0       	ldi	r16, 0x03	; 3
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 ec       	ldi	r20, 0xC0	; 192
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	66 e0       	ldi	r22, 0x06	; 6
    1c2c:	72 e0       	ldi	r23, 0x02	; 2
    1c2e:	85 e8       	ldi	r24, 0x85	; 133
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	56 da       	rcall	.-2900   	; 0x10e0 <xTaskCreate>
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <xTimerCreateTimerTask+0x38>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	08 95       	ret

00001c40 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1c40:	8f 92       	push	r8
    1c42:	9f 92       	push	r9
    1c44:	af 92       	push	r10
    1c46:	bf 92       	push	r11
    1c48:	cf 92       	push	r12
    1c4a:	df 92       	push	r13
    1c4c:	ef 92       	push	r14
    1c4e:	ff 92       	push	r15
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	27 97       	sbiw	r28, 0x07	; 7
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1c68:	e0 91 9d 10 	lds	r30, 0x109D	; 0x80109d <xTimerQueue>
    1c6c:	f0 91 9e 10 	lds	r31, 0x109E	; 0x80109e <xTimerQueue+0x1>
    1c70:	30 97       	sbiw	r30, 0x00	; 0
    1c72:	81 f1       	breq	.+96     	; 0x1cd4 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1c74:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1c76:	2a 83       	std	Y+2, r18	; 0x02
    1c78:	3b 83       	std	Y+3, r19	; 0x03
    1c7a:	4c 83       	std	Y+4, r20	; 0x04
    1c7c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1c7e:	9f 83       	std	Y+7, r25	; 0x07
    1c80:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1c82:	66 30       	cpi	r22, 0x06	; 6
    1c84:	f4 f4       	brge	.+60     	; 0x1cc2 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1c86:	c9 de       	rcall	.-622    	; 0x1a1a <xTaskGetSchedulerState>
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	69 f4       	brne	.+26     	; 0x1ca6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1c8c:	00 e0       	ldi	r16, 0x00	; 0
    1c8e:	a7 01       	movw	r20, r14
    1c90:	96 01       	movw	r18, r12
    1c92:	be 01       	movw	r22, r28
    1c94:	6f 5f       	subi	r22, 0xFF	; 255
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	80 91 9d 10 	lds	r24, 0x109D	; 0x80109d <xTimerQueue>
    1c9c:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <xTimerQueue+0x1>
    1ca0:	0e 94 df 04 	call	0x9be	; 0x9be <xQueueGenericSend>
    1ca4:	18 c0       	rjmp	.+48     	; 0x1cd6 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1ca6:	00 e0       	ldi	r16, 0x00	; 0
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	a9 01       	movw	r20, r18
    1cae:	be 01       	movw	r22, r28
    1cb0:	6f 5f       	subi	r22, 0xFF	; 255
    1cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb4:	80 91 9d 10 	lds	r24, 0x109D	; 0x80109d <xTimerQueue>
    1cb8:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <xTimerQueue+0x1>
    1cbc:	0e 94 df 04 	call	0x9be	; 0x9be <xQueueGenericSend>
    1cc0:	0a c0       	rjmp	.+20     	; 0x1cd6 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	a8 01       	movw	r20, r16
    1cc6:	be 01       	movw	r22, r28
    1cc8:	6f 5f       	subi	r22, 0xFF	; 255
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	cf 01       	movw	r24, r30
    1cce:	0e 94 88 05 	call	0xb10	; 0xb10 <xQueueGenericSendFromISR>
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1cd6:	27 96       	adiw	r28, 0x07	; 7
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	bf 90       	pop	r11
    1cf4:	af 90       	pop	r10
    1cf6:	9f 90       	pop	r9
    1cf8:	8f 90       	pop	r8
    1cfa:	08 95       	ret

00001cfc <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    1cfc:	8f 92       	push	r8
    1cfe:	9f 92       	push	r9
    1d00:	af 92       	push	r10
    1d02:	bf 92       	push	r11
    1d04:	cf 92       	push	r12
    1d06:	df 92       	push	r13
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1d14:	3b c0       	rjmp	.+118    	; 0x1d8c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1d16:	07 80       	ldd	r0, Z+7	; 0x07
    1d18:	f0 85       	ldd	r31, Z+8	; 0x08
    1d1a:	e0 2d       	mov	r30, r0
    1d1c:	80 80       	ld	r8, Z
    1d1e:	91 80       	ldd	r9, Z+1	; 0x01
    1d20:	a2 80       	ldd	r10, Z+2	; 0x02
    1d22:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1d24:	c0 85       	ldd	r28, Z+8	; 0x08
    1d26:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1d28:	8e 01       	movw	r16, r28
    1d2a:	0e 5f       	subi	r16, 0xFE	; 254
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2e:	c8 01       	movw	r24, r16
    1d30:	0e 94 60 02 	call	0x4c0	; 0x4c0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1d34:	ec 89       	ldd	r30, Y+20	; 0x14
    1d36:	fd 89       	ldd	r31, Y+21	; 0x15
    1d38:	ce 01       	movw	r24, r28
    1d3a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1d3c:	8e 89       	ldd	r24, Y+22	; 0x16
    1d3e:	82 ff       	sbrs	r24, 2
    1d40:	25 c0       	rjmp	.+74     	; 0x1d8c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1d42:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d44:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d46:	a8 89       	ldd	r26, Y+16	; 0x10
    1d48:	b9 89       	ldd	r27, Y+17	; 0x11
    1d4a:	88 0d       	add	r24, r8
    1d4c:	99 1d       	adc	r25, r9
    1d4e:	aa 1d       	adc	r26, r10
    1d50:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    1d52:	88 16       	cp	r8, r24
    1d54:	99 06       	cpc	r9, r25
    1d56:	aa 06       	cpc	r10, r26
    1d58:	bb 06       	cpc	r11, r27
    1d5a:	70 f4       	brcc	.+28     	; 0x1d78 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1d5c:	8a 83       	std	Y+2, r24	; 0x02
    1d5e:	9b 83       	std	Y+3, r25	; 0x03
    1d60:	ac 83       	std	Y+4, r26	; 0x04
    1d62:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1d64:	db 87       	std	Y+11, r29	; 0x0b
    1d66:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1d68:	b8 01       	movw	r22, r16
    1d6a:	80 91 a1 10 	lds	r24, 0x10A1	; 0x8010a1 <pxCurrentTimerList>
    1d6e:	90 91 a2 10 	lds	r25, 0x10A2	; 0x8010a2 <pxCurrentTimerList+0x1>
    1d72:	0e 94 23 02 	call	0x446	; 0x446 <vListInsert>
    1d76:	0a c0       	rjmp	.+20     	; 0x1d8c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1d78:	c1 2c       	mov	r12, r1
    1d7a:	d1 2c       	mov	r13, r1
    1d7c:	76 01       	movw	r14, r12
    1d7e:	00 e0       	ldi	r16, 0x00	; 0
    1d80:	10 e0       	ldi	r17, 0x00	; 0
    1d82:	a5 01       	movw	r20, r10
    1d84:	94 01       	movw	r18, r8
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	ce 01       	movw	r24, r28
    1d8a:	5a df       	rcall	.-332    	; 0x1c40 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1d8c:	e0 91 a1 10 	lds	r30, 0x10A1	; 0x8010a1 <pxCurrentTimerList>
    1d90:	f0 91 a2 10 	lds	r31, 0x10A2	; 0x8010a2 <pxCurrentTimerList+0x1>
    1d94:	80 81       	ld	r24, Z
    1d96:	81 11       	cpse	r24, r1
    1d98:	be cf       	rjmp	.-132    	; 0x1d16 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1d9a:	80 91 9f 10 	lds	r24, 0x109F	; 0x80109f <pxOverflowTimerList>
    1d9e:	90 91 a0 10 	lds	r25, 0x10A0	; 0x8010a0 <pxOverflowTimerList+0x1>
    1da2:	90 93 a2 10 	sts	0x10A2, r25	; 0x8010a2 <pxCurrentTimerList+0x1>
    1da6:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    1daa:	f0 93 a0 10 	sts	0x10A0, r31	; 0x8010a0 <pxOverflowTimerList+0x1>
    1dae:	e0 93 9f 10 	sts	0x109F, r30	; 0x80109f <pxOverflowTimerList>
    }
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	df 90       	pop	r13
    1dc0:	cf 90       	pop	r12
    1dc2:	bf 90       	pop	r11
    1dc4:	af 90       	pop	r10
    1dc6:	9f 90       	pop	r9
    1dc8:	8f 90       	pop	r8
    1dca:	08 95       	ret

00001dcc <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1dcc:	cf 92       	push	r12
    1dce:	df 92       	push	r13
    1dd0:	ef 92       	push	r14
    1dd2:	ff 92       	push	r15
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1dda:	07 da       	rcall	.-3058   	; 0x11ea <xTaskGetTickCount>
    1ddc:	6b 01       	movw	r12, r22
    1dde:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    1de0:	80 91 97 10 	lds	r24, 0x1097	; 0x801097 <xLastTime.2436>
    1de4:	90 91 98 10 	lds	r25, 0x1098	; 0x801098 <xLastTime.2436+0x1>
    1de8:	a0 91 99 10 	lds	r26, 0x1099	; 0x801099 <xLastTime.2436+0x2>
    1dec:	b0 91 9a 10 	lds	r27, 0x109A	; 0x80109a <xLastTime.2436+0x3>
    1df0:	c8 16       	cp	r12, r24
    1df2:	d9 06       	cpc	r13, r25
    1df4:	ea 06       	cpc	r14, r26
    1df6:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    1df8:	20 f4       	brcc	.+8      	; 0x1e02 <prvSampleTimeNow+0x36>
    1dfa:	80 df       	rcall	.-256    	; 0x1cfc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	88 83       	st	Y, r24
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1e02:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    1e04:	c0 92 97 10 	sts	0x1097, r12	; 0x801097 <xLastTime.2436>
    1e08:	d0 92 98 10 	sts	0x1098, r13	; 0x801098 <xLastTime.2436+0x1>
    1e0c:	e0 92 99 10 	sts	0x1099, r14	; 0x801099 <xLastTime.2436+0x2>
    1e10:	f0 92 9a 10 	sts	0x109A, r15	; 0x80109a <xLastTime.2436+0x3>

        return xTimeNow;
    }
    1e14:	c7 01       	movw	r24, r14
    1e16:	b6 01       	movw	r22, r12
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	ff 90       	pop	r15
    1e1e:	ef 90       	pop	r14
    1e20:	df 90       	pop	r13
    1e22:	cf 90       	pop	r12
    1e24:	08 95       	ret

00001e26 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1e26:	4f 92       	push	r4
    1e28:	5f 92       	push	r5
    1e2a:	6f 92       	push	r6
    1e2c:	7f 92       	push	r7
    1e2e:	8f 92       	push	r8
    1e30:	9f 92       	push	r9
    1e32:	af 92       	push	r10
    1e34:	bf 92       	push	r11
    1e36:	cf 92       	push	r12
    1e38:	df 92       	push	r13
    1e3a:	ef 92       	push	r14
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	4b 01       	movw	r8, r22
    1e48:	5c 01       	movw	r10, r24
    1e4a:	29 01       	movw	r4, r18
    1e4c:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1e4e:	e0 91 a1 10 	lds	r30, 0x10A1	; 0x8010a1 <pxCurrentTimerList>
    1e52:	f0 91 a2 10 	lds	r31, 0x10A2	; 0x8010a2 <pxCurrentTimerList+0x1>
    1e56:	07 80       	ldd	r0, Z+7	; 0x07
    1e58:	f0 85       	ldd	r31, Z+8	; 0x08
    1e5a:	e0 2d       	mov	r30, r0
    1e5c:	c0 85       	ldd	r28, Z+8	; 0x08
    1e5e:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1e60:	ce 01       	movw	r24, r28
    1e62:	02 96       	adiw	r24, 0x02	; 2
    1e64:	0e 94 60 02 	call	0x4c0	; 0x4c0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1e68:	8e 89       	ldd	r24, Y+22	; 0x16
    1e6a:	82 ff       	sbrs	r24, 2
    1e6c:	1b c0       	rjmp	.+54     	; 0x1ea4 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    1e6e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e70:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e72:	68 89       	ldd	r22, Y+16	; 0x10
    1e74:	79 89       	ldd	r23, Y+17	; 0x11
    1e76:	48 0d       	add	r20, r8
    1e78:	59 1d       	adc	r21, r9
    1e7a:	6a 1d       	adc	r22, r10
    1e7c:	7b 1d       	adc	r23, r11
    1e7e:	75 01       	movw	r14, r10
    1e80:	64 01       	movw	r12, r8
    1e82:	93 01       	movw	r18, r6
    1e84:	82 01       	movw	r16, r4
    1e86:	ce 01       	movw	r24, r28
    1e88:	49 de       	rcall	.-878    	; 0x1b1c <prvInsertTimerInActiveList>
    1e8a:	88 23       	and	r24, r24
    1e8c:	69 f0       	breq	.+26     	; 0x1ea8 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1e8e:	c1 2c       	mov	r12, r1
    1e90:	d1 2c       	mov	r13, r1
    1e92:	76 01       	movw	r14, r12
    1e94:	00 e0       	ldi	r16, 0x00	; 0
    1e96:	10 e0       	ldi	r17, 0x00	; 0
    1e98:	a5 01       	movw	r20, r10
    1e9a:	94 01       	movw	r18, r8
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	cf de       	rcall	.-610    	; 0x1c40 <xTimerGenericCommand>
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    1ea4:	8e 7f       	andi	r24, 0xFE	; 254
    1ea6:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1ea8:	ec 89       	ldd	r30, Y+20	; 0x14
    1eaa:	fd 89       	ldd	r31, Y+21	; 0x15
    1eac:	ce 01       	movw	r24, r28
    1eae:	19 95       	eicall
    }
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	9f 90       	pop	r9
    1ec6:	8f 90       	pop	r8
    1ec8:	7f 90       	pop	r7
    1eca:	6f 90       	pop	r6
    1ecc:	5f 90       	pop	r5
    1ece:	4f 90       	pop	r4
    1ed0:	08 95       	ret

00001ed2 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    1ed2:	8f 92       	push	r8
    1ed4:	9f 92       	push	r9
    1ed6:	af 92       	push	r10
    1ed8:	bf 92       	push	r11
    1eda:	cf 92       	push	r12
    1edc:	df 92       	push	r13
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	1f 92       	push	r1
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	6b 01       	movw	r12, r22
    1ef0:	7c 01       	movw	r14, r24
    1ef2:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1ef4:	74 d9       	rcall	.-3352   	; 0x11de <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	01 96       	adiw	r24, 0x01	; 1
    1efa:	68 df       	rcall	.-304    	; 0x1dcc <prvSampleTimeNow>
    1efc:	4b 01       	movw	r8, r22
    1efe:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	81 11       	cpse	r24, r1
    1f04:	2b c0       	rjmp	.+86     	; 0x1f5c <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1f06:	11 11       	cpse	r17, r1
    1f08:	0c c0       	rjmp	.+24     	; 0x1f22 <prvProcessTimerOrBlockTask+0x50>
    1f0a:	8c 14       	cp	r8, r12
    1f0c:	9d 04       	cpc	r9, r13
    1f0e:	ae 04       	cpc	r10, r14
    1f10:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    1f12:	38 f0       	brcs	.+14     	; 0x1f22 <prvProcessTimerOrBlockTask+0x50>
    1f14:	a4 da       	rcall	.-2744   	; 0x145e <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1f16:	a5 01       	movw	r20, r10
    1f18:	94 01       	movw	r18, r8
    1f1a:	c7 01       	movw	r24, r14
    1f1c:	b6 01       	movw	r22, r12
    1f1e:	83 df       	rcall	.-250    	; 0x1e26 <prvProcessExpiredTimer>
    1f20:	1e c0       	rjmp	.+60     	; 0x1f5e <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    1f22:	11 23       	and	r17, r17
    1f24:	41 f0       	breq	.+16     	; 0x1f36 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1f26:	e0 91 9f 10 	lds	r30, 0x109F	; 0x80109f <pxOverflowTimerList>
    1f2a:	f0 91 a0 10 	lds	r31, 0x10A0	; 0x8010a0 <pxOverflowTimerList+0x1>
    1f2e:	80 81       	ld	r24, Z
    1f30:	11 e0       	ldi	r17, 0x01	; 1
    1f32:	81 11       	cpse	r24, r1
    1f34:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    1f36:	b7 01       	movw	r22, r14
    1f38:	a6 01       	movw	r20, r12
    1f3a:	48 19       	sub	r20, r8
    1f3c:	59 09       	sbc	r21, r9
    1f3e:	6a 09       	sbc	r22, r10
    1f40:	7b 09       	sbc	r23, r11
    1f42:	21 2f       	mov	r18, r17
    1f44:	80 91 9d 10 	lds	r24, 0x109D	; 0x80109d <xTimerQueue>
    1f48:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <xTimerQueue+0x1>
    1f4c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    1f50:	86 da       	rcall	.-2804   	; 0x145e <xTaskResumeAll>
    1f52:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <prvProcessTimerOrBlockTask+0x8c>
    1f56:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    1f5a:	01 c0       	rjmp	.+2      	; 0x1f5e <prvProcessTimerOrBlockTask+0x8c>
    1f5c:	80 da       	rcall	.-2816   	; 0x145e <xTaskResumeAll>
            }
        }
    }
    1f5e:	0f 90       	pop	r0
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	ff 90       	pop	r15
    1f68:	ef 90       	pop	r14
    1f6a:	df 90       	pop	r13
    1f6c:	cf 90       	pop	r12
    1f6e:	bf 90       	pop	r11
    1f70:	af 90       	pop	r10
    1f72:	9f 90       	pop	r9
    1f74:	8f 90       	pop	r8
    1f76:	08 95       	ret

00001f78 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    1f78:	af 92       	push	r10
    1f7a:	bf 92       	push	r11
    1f7c:	cf 92       	push	r12
    1f7e:	df 92       	push	r13
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	28 97       	sbiw	r28, 0x08	; 8
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1f9c:	81 c0       	rjmp	.+258    	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	88 23       	and	r24, r24
    1fa2:	0c f4       	brge	.+2      	; 0x1fa6 <prvProcessReceivedCommands+0x2e>
    1fa4:	7d c0       	rjmp	.+250    	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1fa6:	ae 80       	ldd	r10, Y+6	; 0x06
    1fa8:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    1faa:	d5 01       	movw	r26, r10
    1fac:	1c 96       	adiw	r26, 0x0c	; 12
    1fae:	8d 91       	ld	r24, X+
    1fb0:	9c 91       	ld	r25, X
    1fb2:	1d 97       	sbiw	r26, 0x0d	; 13
    1fb4:	89 2b       	or	r24, r25
    1fb6:	21 f0       	breq	.+8      	; 0x1fc0 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1fb8:	c5 01       	movw	r24, r10
    1fba:	02 96       	adiw	r24, 0x02	; 2
    1fbc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	08 96       	adiw	r24, 0x08	; 8
    1fc4:	03 df       	rcall	.-506    	; 0x1dcc <prvSampleTimeNow>
    1fc6:	8b 01       	movw	r16, r22
    1fc8:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    1fca:	e9 81       	ldd	r30, Y+1	; 0x01
    1fcc:	0e 2e       	mov	r0, r30
    1fce:	00 0c       	add	r0, r0
    1fd0:	ff 0b       	sbc	r31, r31
    1fd2:	ea 30       	cpi	r30, 0x0A	; 10
    1fd4:	f1 05       	cpc	r31, r1
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <prvProcessReceivedCommands+0x62>
    1fd8:	63 c0       	rjmp	.+198    	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
    1fda:	88 27       	eor	r24, r24
    1fdc:	ee 58       	subi	r30, 0x8E	; 142
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe2:	4b c3       	rjmp	.+1686   	; 0x267a <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    1fe4:	f5 01       	movw	r30, r10
    1fe6:	86 89       	ldd	r24, Z+22	; 0x16
    1fe8:	81 60       	ori	r24, 0x01	; 1
    1fea:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    1fec:	ca 80       	ldd	r12, Y+2	; 0x02
    1fee:	db 80       	ldd	r13, Y+3	; 0x03
    1ff0:	ec 80       	ldd	r14, Y+4	; 0x04
    1ff2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ff4:	46 85       	ldd	r20, Z+14	; 0x0e
    1ff6:	57 85       	ldd	r21, Z+15	; 0x0f
    1ff8:	60 89       	ldd	r22, Z+16	; 0x10
    1ffa:	71 89       	ldd	r23, Z+17	; 0x11
    1ffc:	4c 0d       	add	r20, r12
    1ffe:	5d 1d       	adc	r21, r13
    2000:	6e 1d       	adc	r22, r14
    2002:	7f 1d       	adc	r23, r15
    2004:	c5 01       	movw	r24, r10
    2006:	8a dd       	rcall	.-1260   	; 0x1b1c <prvInsertTimerInActiveList>
    2008:	88 23       	and	r24, r24
    200a:	09 f4       	brne	.+2      	; 0x200e <__DATA_REGION_LENGTH__+0xe>
    200c:	49 c0       	rjmp	.+146    	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    200e:	d5 01       	movw	r26, r10
    2010:	54 96       	adiw	r26, 0x14	; 20
    2012:	ed 91       	ld	r30, X+
    2014:	fc 91       	ld	r31, X
    2016:	55 97       	sbiw	r26, 0x15	; 21
    2018:	c5 01       	movw	r24, r10
    201a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    201c:	f5 01       	movw	r30, r10
    201e:	86 89       	ldd	r24, Z+22	; 0x16
    2020:	82 ff       	sbrs	r24, 2
    2022:	3e c0       	rjmp	.+124    	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2024:	4a 81       	ldd	r20, Y+2	; 0x02
    2026:	5b 81       	ldd	r21, Y+3	; 0x03
    2028:	6c 81       	ldd	r22, Y+4	; 0x04
    202a:	7d 81       	ldd	r23, Y+5	; 0x05
    202c:	86 85       	ldd	r24, Z+14	; 0x0e
    202e:	97 85       	ldd	r25, Z+15	; 0x0f
    2030:	a0 89       	ldd	r26, Z+16	; 0x10
    2032:	b1 89       	ldd	r27, Z+17	; 0x11
    2034:	9a 01       	movw	r18, r20
    2036:	ab 01       	movw	r20, r22
    2038:	28 0f       	add	r18, r24
    203a:	39 1f       	adc	r19, r25
    203c:	4a 1f       	adc	r20, r26
    203e:	5b 1f       	adc	r21, r27
    2040:	c1 2c       	mov	r12, r1
    2042:	d1 2c       	mov	r13, r1
    2044:	76 01       	movw	r14, r12
    2046:	00 e0       	ldi	r16, 0x00	; 0
    2048:	10 e0       	ldi	r17, 0x00	; 0
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	c5 01       	movw	r24, r10
    204e:	f8 dd       	rcall	.-1040   	; 0x1c40 <xTimerGenericCommand>
    2050:	27 c0       	rjmp	.+78     	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2052:	d5 01       	movw	r26, r10
    2054:	56 96       	adiw	r26, 0x16	; 22
    2056:	8c 91       	ld	r24, X
    2058:	56 97       	sbiw	r26, 0x16	; 22
    205a:	8e 7f       	andi	r24, 0xFE	; 254
    205c:	56 96       	adiw	r26, 0x16	; 22
    205e:	8c 93       	st	X, r24
                        break;
    2060:	1f c0       	rjmp	.+62     	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2062:	f5 01       	movw	r30, r10
    2064:	86 89       	ldd	r24, Z+22	; 0x16
    2066:	81 60       	ori	r24, 0x01	; 1
    2068:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    206a:	4a 81       	ldd	r20, Y+2	; 0x02
    206c:	5b 81       	ldd	r21, Y+3	; 0x03
    206e:	6c 81       	ldd	r22, Y+4	; 0x04
    2070:	7d 81       	ldd	r23, Y+5	; 0x05
    2072:	46 87       	std	Z+14, r20	; 0x0e
    2074:	57 87       	std	Z+15, r21	; 0x0f
    2076:	60 8b       	std	Z+16, r22	; 0x10
    2078:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    207a:	40 0f       	add	r20, r16
    207c:	51 1f       	adc	r21, r17
    207e:	62 1f       	adc	r22, r18
    2080:	73 1f       	adc	r23, r19
    2082:	68 01       	movw	r12, r16
    2084:	79 01       	movw	r14, r18
    2086:	c5 01       	movw	r24, r10
    2088:	49 dd       	rcall	.-1390   	; 0x1b1c <prvInsertTimerInActiveList>
                        break;
    208a:	0a c0       	rjmp	.+20     	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    208c:	f5 01       	movw	r30, r10
    208e:	86 89       	ldd	r24, Z+22	; 0x16
    2090:	81 fd       	sbrc	r24, 1
    2092:	04 c0       	rjmp	.+8      	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
                                {
                                    vPortFree( pxTimer );
    2094:	c5 01       	movw	r24, r10
    2096:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <vPortFree>
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    209c:	8e 7f       	andi	r24, 0xFE	; 254
    209e:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	a9 01       	movw	r20, r18
    20a6:	be 01       	movw	r22, r28
    20a8:	6f 5f       	subi	r22, 0xFF	; 255
    20aa:	7f 4f       	sbci	r23, 0xFF	; 255
    20ac:	80 91 9d 10 	lds	r24, 0x109D	; 0x80109d <xTimerQueue>
    20b0:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <xTimerQueue+0x1>
    20b4:	0e 94 c2 05 	call	0xb84	; 0xb84 <xQueueReceive>
    20b8:	81 11       	cpse	r24, r1
    20ba:	71 cf       	rjmp	.-286    	; 0x1f9e <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    20bc:	28 96       	adiw	r28, 0x08	; 8
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	ff 90       	pop	r15
    20d2:	ef 90       	pop	r14
    20d4:	df 90       	pop	r13
    20d6:	cf 90       	pop	r12
    20d8:	bf 90       	pop	r11
    20da:	af 90       	pop	r10
    20dc:	08 95       	ret

000020de <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    20de:	08 95       	ret

000020e0 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    20e0:	84 b1       	in	r24, 0x04	; 4
    20e2:	80 68       	ori	r24, 0x80	; 128
    20e4:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    20e6:	85 b1       	in	r24, 0x05	; 5
    20e8:	80 68       	ori	r24, 0x80	; 128
    20ea:	85 b9       	out	0x05, r24	; 5
    20ec:	08 95       	ret

000020ee <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    20ee:	83 b1       	in	r24, 0x03	; 3
    20f0:	80 68       	ori	r24, 0x80	; 128
    20f2:	83 b9       	out	0x03, r24	; 3
    20f4:	08 95       	ret

000020f6 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    20f6:	f4 df       	rcall	.-24     	; 0x20e0 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20f8:	2f ef       	ldi	r18, 0xFF	; 255
    20fa:	80 e7       	ldi	r24, 0x70	; 112
    20fc:	92 e0       	ldi	r25, 0x02	; 2
    20fe:	21 50       	subi	r18, 0x01	; 1
    2100:	80 40       	sbci	r24, 0x00	; 0
    2102:	90 40       	sbci	r25, 0x00	; 0
    2104:	e1 f7       	brne	.-8      	; 0x20fe <vApplicationMallocFailedHook+0x8>
    2106:	00 c0       	rjmp	.+0      	; 0x2108 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2108:	00 00       	nop
    210a:	f1 df       	rcall	.-30     	; 0x20ee <prvBlinkMainLed>
    210c:	f5 cf       	rjmp	.-22     	; 0x20f8 <vApplicationMallocFailedHook+0x2>

0000210e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    210e:	e8 df       	rcall	.-48     	; 0x20e0 <prvSetMainLedOn>
    2110:	2f ef       	ldi	r18, 0xFF	; 255
    2112:	87 ea       	ldi	r24, 0xA7	; 167
    2114:	91 e6       	ldi	r25, 0x61	; 97
    2116:	21 50       	subi	r18, 0x01	; 1
    2118:	80 40       	sbci	r24, 0x00	; 0
    211a:	90 40       	sbci	r25, 0x00	; 0
    211c:	e1 f7       	brne	.-8      	; 0x2116 <vApplicationStackOverflowHook+0x8>
    211e:	00 c0       	rjmp	.+0      	; 0x2120 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2120:	00 00       	nop
    2122:	e5 df       	rcall	.-54     	; 0x20ee <prvBlinkMainLed>
    2124:	f5 cf       	rjmp	.-22     	; 0x2110 <vApplicationStackOverflowHook+0x2>

00002126 <task1>:
	#endif

	for(;;)
	{
		//xSemaphoreTake(xTestSemaphore,portMAX_DELAY);
		vTaskDelay(10);
    2126:	6a e0       	ldi	r22, 0x0A	; 10
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	73 da       	rcall	.-2842   	; 0x1616 <vTaskDelay>
		//xSemaphoreGive(xTestSemaphore);

		PORTA ^= _BV(PA0);
    2130:	92 b1       	in	r25, 0x02	; 2
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	89 27       	eor	r24, r25
    2136:	82 b9       	out	0x02, r24	; 2
    2138:	f6 cf       	rjmp	.-20     	; 0x2126 <task1>

0000213a <task2>:
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
	#endif

	for(;;)
	{
		vTaskDelay(50);
    213a:	62 e3       	ldi	r22, 0x32	; 50
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	69 da       	rcall	.-2862   	; 0x1616 <vTaskDelay>
		PORTA ^= _BV(PA7);
    2144:	82 b1       	in	r24, 0x02	; 2
    2146:	80 58       	subi	r24, 0x80	; 128
    2148:	82 b9       	out	0x02, r24	; 2
    214a:	f7 cf       	rjmp	.-18     	; 0x213a <task2>

0000214c <create_tasks_and_semaphores>:
SemaphoreHandle_t xTestSemaphore;


/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    2152:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <xTestSemaphore>
    2156:	90 91 c2 10 	lds	r25, 0x10C2	; 0x8010c2 <xTestSemaphore+0x1>
    215a:	89 2b       	or	r24, r25
    215c:	89 f4       	brne	.+34     	; 0x2180 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <xQueueCreateMutex>
    2164:	90 93 c2 10 	sts	0x10C2, r25	; 0x8010c2 <xTestSemaphore+0x1>
    2168:	80 93 c1 10 	sts	0x10C1, r24	; 0x8010c1 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	41 f0       	breq	.+16     	; 0x2180 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    2170:	00 e0       	ldi	r16, 0x00	; 0
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	a9 01       	movw	r20, r18
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	0e 94 df 04 	call	0x9be	; 0x9be <xQueueGenericSend>
		}
	}

	xTaskCreate(
    2180:	e1 2c       	mov	r14, r1
    2182:	f1 2c       	mov	r15, r1
    2184:	02 e0       	ldi	r16, 0x02	; 2
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 ec       	ldi	r20, 0xC0	; 192
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	6e e0       	ldi	r22, 0x0E	; 14
    2190:	72 e0       	ldi	r23, 0x02	; 2
    2192:	83 e9       	ldi	r24, 0x93	; 147
    2194:	90 e1       	ldi	r25, 0x10	; 16
    2196:	0e 94 70 08 	call	0x10e0	; 0x10e0 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    219a:	01 e0       	ldi	r16, 0x01	; 1
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 ec       	ldi	r20, 0xC0	; 192
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	64 e1       	ldi	r22, 0x14	; 20
    21a6:	72 e0       	ldi	r23, 0x02	; 2
    21a8:	8d e9       	ldi	r24, 0x9D	; 157
    21aa:	90 e1       	ldi	r25, 0x10	; 16
    21ac:	0e 94 70 08 	call	0x10e0	; 0x10e0 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

}
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	08 95       	ret

000021b8 <main>:


/*-----------------------------------------------------------*/
int main(void)
{
	DDRA |= _BV(DDA0) | _BV(DDA7);
    21b8:	81 b1       	in	r24, 0x01	; 1
    21ba:	81 68       	ori	r24, 0x81	; 129
    21bc:	81 b9       	out	0x01, r24	; 1
	trace_init();
    21be:	0e 94 b6 00 	call	0x16c	; 0x16c <trace_init>

	create_tasks_and_semaphores();
    21c2:	c4 df       	rcall	.-120    	; 0x214c <create_tasks_and_semaphores>
	vTaskStartScheduler(); // initialise and run the freeRTOS scheduler. Execution should never return here.
    21c4:	0e 94 b9 08 	call	0x1172	; 0x1172 <vTaskStartScheduler>
    21c8:	ff cf       	rjmp	.-2      	; 0x21c8 <main+0x10>

000021ca <__vector_25>:
    21ca:	1f 92       	push	r1
    21cc:	0f 92       	push	r0
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	0f 92       	push	r0
    21d2:	11 24       	eor	r1, r1
    21d4:	0b b6       	in	r0, 0x3b	; 59
    21d6:	0f 92       	push	r0
    21d8:	2f 93       	push	r18
    21da:	3f 93       	push	r19
    21dc:	4f 93       	push	r20
    21de:	5f 93       	push	r21
    21e0:	6f 93       	push	r22
    21e2:	7f 93       	push	r23
    21e4:	8f 93       	push	r24
    21e6:	9f 93       	push	r25
    21e8:	af 93       	push	r26
    21ea:	bf 93       	push	r27
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	ef 93       	push	r30
    21f2:	ff 93       	push	r31
    21f4:	a0 91 b9 10 	lds	r26, 0x10B9	; 0x8010b9 <_ser_handle>
    21f8:	b0 91 ba 10 	lds	r27, 0x10BA	; 0x8010ba <_ser_handle+0x1>
    21fc:	10 97       	sbiw	r26, 0x00	; 0
    21fe:	11 f1       	breq	.+68     	; 0x2244 <__stack+0x45>
    2200:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2204:	14 96       	adiw	r26, 0x04	; 4
    2206:	ed 91       	ld	r30, X+
    2208:	fc 91       	ld	r31, X
    220a:	15 97       	sbiw	r26, 0x05	; 5
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	25 81       	ldd	r18, Z+5	; 0x05
    2212:	98 1b       	sub	r25, r24
    2214:	92 23       	and	r25, r18
    2216:	84 81       	ldd	r24, Z+4	; 0x04
    2218:	98 17       	cp	r25, r24
    221a:	61 f0       	breq	.+24     	; 0x2234 <__stack+0x35>
    221c:	83 81       	ldd	r24, Z+3	; 0x03
    221e:	26 95       	lsr	r18
    2220:	28 23       	and	r18, r24
    2222:	c0 81       	ld	r28, Z
    2224:	d1 81       	ldd	r29, Z+1	; 0x01
    2226:	c2 0f       	add	r28, r18
    2228:	d1 1d       	adc	r29, r1
    222a:	68 83       	st	Y, r22
    222c:	8f 5f       	subi	r24, 0xFF	; 255
    222e:	95 81       	ldd	r25, Z+5	; 0x05
    2230:	89 23       	and	r24, r25
    2232:	83 83       	std	Z+3, r24	; 0x03
    2234:	16 96       	adiw	r26, 0x06	; 6
    2236:	ed 91       	ld	r30, X+
    2238:	fc 91       	ld	r31, X
    223a:	17 97       	sbiw	r26, 0x07	; 7
    223c:	30 97       	sbiw	r30, 0x00	; 0
    223e:	11 f0       	breq	.+4      	; 0x2244 <__stack+0x45>
    2240:	cd 01       	movw	r24, r26
    2242:	19 95       	eicall
    2244:	ff 91       	pop	r31
    2246:	ef 91       	pop	r30
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	bf 91       	pop	r27
    224e:	af 91       	pop	r26
    2250:	9f 91       	pop	r25
    2252:	8f 91       	pop	r24
    2254:	7f 91       	pop	r23
    2256:	6f 91       	pop	r22
    2258:	5f 91       	pop	r21
    225a:	4f 91       	pop	r20
    225c:	3f 91       	pop	r19
    225e:	2f 91       	pop	r18
    2260:	0f 90       	pop	r0
    2262:	0b be       	out	0x3b, r0	; 59
    2264:	0f 90       	pop	r0
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	0f 90       	pop	r0
    226a:	1f 90       	pop	r1
    226c:	18 95       	reti

0000226e <__vector_26>:
    226e:	1f 92       	push	r1
    2270:	0f 92       	push	r0
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	0f 92       	push	r0
    2276:	11 24       	eor	r1, r1
    2278:	0b b6       	in	r0, 0x3b	; 59
    227a:	0f 92       	push	r0
    227c:	2f 93       	push	r18
    227e:	8f 93       	push	r24
    2280:	9f 93       	push	r25
    2282:	af 93       	push	r26
    2284:	bf 93       	push	r27
    2286:	ef 93       	push	r30
    2288:	ff 93       	push	r31
    228a:	e0 91 b9 10 	lds	r30, 0x10B9	; 0x8010b9 <_ser_handle>
    228e:	f0 91 ba 10 	lds	r31, 0x10BA	; 0x8010ba <_ser_handle+0x1>
    2292:	30 97       	sbiw	r30, 0x00	; 0
    2294:	b9 f0       	breq	.+46     	; 0x22c4 <__vector_26+0x56>
    2296:	02 80       	ldd	r0, Z+2	; 0x02
    2298:	f3 81       	ldd	r31, Z+3	; 0x03
    229a:	e0 2d       	mov	r30, r0
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	98 17       	cp	r25, r24
    22a2:	b1 f0       	breq	.+44     	; 0x22d0 <__vector_26+0x62>
    22a4:	92 81       	ldd	r25, Z+2	; 0x02
    22a6:	85 81       	ldd	r24, Z+5	; 0x05
    22a8:	28 2f       	mov	r18, r24
    22aa:	26 95       	lsr	r18
    22ac:	29 23       	and	r18, r25
    22ae:	a0 81       	ld	r26, Z
    22b0:	b1 81       	ldd	r27, Z+1	; 0x01
    22b2:	a2 0f       	add	r26, r18
    22b4:	b1 1d       	adc	r27, r1
    22b6:	2c 91       	ld	r18, X
    22b8:	9f 5f       	subi	r25, 0xFF	; 255
    22ba:	89 23       	and	r24, r25
    22bc:	82 83       	std	Z+2, r24	; 0x02
    22be:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    22c2:	0b c0       	rjmp	.+22     	; 0x22da <__vector_26+0x6c>
    22c4:	e1 ec       	ldi	r30, 0xC1	; 193
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8f 7d       	andi	r24, 0xDF	; 223
    22cc:	80 83       	st	Z, r24
    22ce:	05 c0       	rjmp	.+10     	; 0x22da <__vector_26+0x6c>
    22d0:	e1 ec       	ldi	r30, 0xC1	; 193
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	8f 7d       	andi	r24, 0xDF	; 223
    22d8:	80 83       	st	Z, r24
    22da:	ff 91       	pop	r31
    22dc:	ef 91       	pop	r30
    22de:	bf 91       	pop	r27
    22e0:	af 91       	pop	r26
    22e2:	9f 91       	pop	r25
    22e4:	8f 91       	pop	r24
    22e6:	2f 91       	pop	r18
    22e8:	0f 90       	pop	r0
    22ea:	0b be       	out	0x3b, r0	; 59
    22ec:	0f 90       	pop	r0
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	0f 90       	pop	r0
    22f2:	1f 90       	pop	r1
    22f4:	18 95       	reti

000022f6 <__vector_36>:
    22f6:	1f 92       	push	r1
    22f8:	0f 92       	push	r0
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	0f 92       	push	r0
    22fe:	11 24       	eor	r1, r1
    2300:	0b b6       	in	r0, 0x3b	; 59
    2302:	0f 92       	push	r0
    2304:	2f 93       	push	r18
    2306:	3f 93       	push	r19
    2308:	4f 93       	push	r20
    230a:	5f 93       	push	r21
    230c:	6f 93       	push	r22
    230e:	7f 93       	push	r23
    2310:	8f 93       	push	r24
    2312:	9f 93       	push	r25
    2314:	af 93       	push	r26
    2316:	bf 93       	push	r27
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	ef 93       	push	r30
    231e:	ff 93       	push	r31
    2320:	a0 91 bb 10 	lds	r26, 0x10BB	; 0x8010bb <_ser_handle+0x2>
    2324:	b0 91 bc 10 	lds	r27, 0x10BC	; 0x8010bc <_ser_handle+0x3>
    2328:	10 97       	sbiw	r26, 0x00	; 0
    232a:	11 f1       	breq	.+68     	; 0x2370 <__vector_36+0x7a>
    232c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2330:	14 96       	adiw	r26, 0x04	; 4
    2332:	ed 91       	ld	r30, X+
    2334:	fc 91       	ld	r31, X
    2336:	15 97       	sbiw	r26, 0x05	; 5
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	25 81       	ldd	r18, Z+5	; 0x05
    233e:	98 1b       	sub	r25, r24
    2340:	92 23       	and	r25, r18
    2342:	84 81       	ldd	r24, Z+4	; 0x04
    2344:	98 17       	cp	r25, r24
    2346:	61 f0       	breq	.+24     	; 0x2360 <__vector_36+0x6a>
    2348:	83 81       	ldd	r24, Z+3	; 0x03
    234a:	26 95       	lsr	r18
    234c:	28 23       	and	r18, r24
    234e:	c0 81       	ld	r28, Z
    2350:	d1 81       	ldd	r29, Z+1	; 0x01
    2352:	c2 0f       	add	r28, r18
    2354:	d1 1d       	adc	r29, r1
    2356:	68 83       	st	Y, r22
    2358:	8f 5f       	subi	r24, 0xFF	; 255
    235a:	95 81       	ldd	r25, Z+5	; 0x05
    235c:	89 23       	and	r24, r25
    235e:	83 83       	std	Z+3, r24	; 0x03
    2360:	16 96       	adiw	r26, 0x06	; 6
    2362:	ed 91       	ld	r30, X+
    2364:	fc 91       	ld	r31, X
    2366:	17 97       	sbiw	r26, 0x07	; 7
    2368:	30 97       	sbiw	r30, 0x00	; 0
    236a:	11 f0       	breq	.+4      	; 0x2370 <__vector_36+0x7a>
    236c:	cd 01       	movw	r24, r26
    236e:	19 95       	eicall
    2370:	ff 91       	pop	r31
    2372:	ef 91       	pop	r30
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	bf 91       	pop	r27
    237a:	af 91       	pop	r26
    237c:	9f 91       	pop	r25
    237e:	8f 91       	pop	r24
    2380:	7f 91       	pop	r23
    2382:	6f 91       	pop	r22
    2384:	5f 91       	pop	r21
    2386:	4f 91       	pop	r20
    2388:	3f 91       	pop	r19
    238a:	2f 91       	pop	r18
    238c:	0f 90       	pop	r0
    238e:	0b be       	out	0x3b, r0	; 59
    2390:	0f 90       	pop	r0
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	0f 90       	pop	r0
    2396:	1f 90       	pop	r1
    2398:	18 95       	reti

0000239a <__vector_37>:
    239a:	1f 92       	push	r1
    239c:	0f 92       	push	r0
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	0f 92       	push	r0
    23a2:	11 24       	eor	r1, r1
    23a4:	0b b6       	in	r0, 0x3b	; 59
    23a6:	0f 92       	push	r0
    23a8:	2f 93       	push	r18
    23aa:	8f 93       	push	r24
    23ac:	9f 93       	push	r25
    23ae:	af 93       	push	r26
    23b0:	bf 93       	push	r27
    23b2:	ef 93       	push	r30
    23b4:	ff 93       	push	r31
    23b6:	e0 91 bb 10 	lds	r30, 0x10BB	; 0x8010bb <_ser_handle+0x2>
    23ba:	f0 91 bc 10 	lds	r31, 0x10BC	; 0x8010bc <_ser_handle+0x3>
    23be:	30 97       	sbiw	r30, 0x00	; 0
    23c0:	b9 f0       	breq	.+46     	; 0x23f0 <__vector_37+0x56>
    23c2:	02 80       	ldd	r0, Z+2	; 0x02
    23c4:	f3 81       	ldd	r31, Z+3	; 0x03
    23c6:	e0 2d       	mov	r30, r0
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	98 17       	cp	r25, r24
    23ce:	b1 f0       	breq	.+44     	; 0x23fc <__vector_37+0x62>
    23d0:	92 81       	ldd	r25, Z+2	; 0x02
    23d2:	85 81       	ldd	r24, Z+5	; 0x05
    23d4:	28 2f       	mov	r18, r24
    23d6:	26 95       	lsr	r18
    23d8:	29 23       	and	r18, r25
    23da:	a0 81       	ld	r26, Z
    23dc:	b1 81       	ldd	r27, Z+1	; 0x01
    23de:	a2 0f       	add	r26, r18
    23e0:	b1 1d       	adc	r27, r1
    23e2:	2c 91       	ld	r18, X
    23e4:	9f 5f       	subi	r25, 0xFF	; 255
    23e6:	89 23       	and	r24, r25
    23e8:	82 83       	std	Z+2, r24	; 0x02
    23ea:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    23ee:	0b c0       	rjmp	.+22     	; 0x2406 <__vector_37+0x6c>
    23f0:	e9 ec       	ldi	r30, 0xC9	; 201
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	8f 7d       	andi	r24, 0xDF	; 223
    23f8:	80 83       	st	Z, r24
    23fa:	05 c0       	rjmp	.+10     	; 0x2406 <__vector_37+0x6c>
    23fc:	e9 ec       	ldi	r30, 0xC9	; 201
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8f 7d       	andi	r24, 0xDF	; 223
    2404:	80 83       	st	Z, r24
    2406:	ff 91       	pop	r31
    2408:	ef 91       	pop	r30
    240a:	bf 91       	pop	r27
    240c:	af 91       	pop	r26
    240e:	9f 91       	pop	r25
    2410:	8f 91       	pop	r24
    2412:	2f 91       	pop	r18
    2414:	0f 90       	pop	r0
    2416:	0b be       	out	0x3b, r0	; 59
    2418:	0f 90       	pop	r0
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	0f 90       	pop	r0
    241e:	1f 90       	pop	r1
    2420:	18 95       	reti

00002422 <__vector_51>:
    2422:	1f 92       	push	r1
    2424:	0f 92       	push	r0
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	0f 92       	push	r0
    242a:	11 24       	eor	r1, r1
    242c:	0b b6       	in	r0, 0x3b	; 59
    242e:	0f 92       	push	r0
    2430:	2f 93       	push	r18
    2432:	3f 93       	push	r19
    2434:	4f 93       	push	r20
    2436:	5f 93       	push	r21
    2438:	6f 93       	push	r22
    243a:	7f 93       	push	r23
    243c:	8f 93       	push	r24
    243e:	9f 93       	push	r25
    2440:	af 93       	push	r26
    2442:	bf 93       	push	r27
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	ef 93       	push	r30
    244a:	ff 93       	push	r31
    244c:	a0 91 bd 10 	lds	r26, 0x10BD	; 0x8010bd <_ser_handle+0x4>
    2450:	b0 91 be 10 	lds	r27, 0x10BE	; 0x8010be <_ser_handle+0x5>
    2454:	10 97       	sbiw	r26, 0x00	; 0
    2456:	11 f1       	breq	.+68     	; 0x249c <__vector_51+0x7a>
    2458:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    245c:	14 96       	adiw	r26, 0x04	; 4
    245e:	ed 91       	ld	r30, X+
    2460:	fc 91       	ld	r31, X
    2462:	15 97       	sbiw	r26, 0x05	; 5
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	25 81       	ldd	r18, Z+5	; 0x05
    246a:	98 1b       	sub	r25, r24
    246c:	92 23       	and	r25, r18
    246e:	84 81       	ldd	r24, Z+4	; 0x04
    2470:	98 17       	cp	r25, r24
    2472:	61 f0       	breq	.+24     	; 0x248c <__vector_51+0x6a>
    2474:	83 81       	ldd	r24, Z+3	; 0x03
    2476:	26 95       	lsr	r18
    2478:	28 23       	and	r18, r24
    247a:	c0 81       	ld	r28, Z
    247c:	d1 81       	ldd	r29, Z+1	; 0x01
    247e:	c2 0f       	add	r28, r18
    2480:	d1 1d       	adc	r29, r1
    2482:	68 83       	st	Y, r22
    2484:	8f 5f       	subi	r24, 0xFF	; 255
    2486:	95 81       	ldd	r25, Z+5	; 0x05
    2488:	89 23       	and	r24, r25
    248a:	83 83       	std	Z+3, r24	; 0x03
    248c:	16 96       	adiw	r26, 0x06	; 6
    248e:	ed 91       	ld	r30, X+
    2490:	fc 91       	ld	r31, X
    2492:	17 97       	sbiw	r26, 0x07	; 7
    2494:	30 97       	sbiw	r30, 0x00	; 0
    2496:	11 f0       	breq	.+4      	; 0x249c <__vector_51+0x7a>
    2498:	cd 01       	movw	r24, r26
    249a:	19 95       	eicall
    249c:	ff 91       	pop	r31
    249e:	ef 91       	pop	r30
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	bf 91       	pop	r27
    24a6:	af 91       	pop	r26
    24a8:	9f 91       	pop	r25
    24aa:	8f 91       	pop	r24
    24ac:	7f 91       	pop	r23
    24ae:	6f 91       	pop	r22
    24b0:	5f 91       	pop	r21
    24b2:	4f 91       	pop	r20
    24b4:	3f 91       	pop	r19
    24b6:	2f 91       	pop	r18
    24b8:	0f 90       	pop	r0
    24ba:	0b be       	out	0x3b, r0	; 59
    24bc:	0f 90       	pop	r0
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	0f 90       	pop	r0
    24c2:	1f 90       	pop	r1
    24c4:	18 95       	reti

000024c6 <__vector_52>:
    24c6:	1f 92       	push	r1
    24c8:	0f 92       	push	r0
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	0f 92       	push	r0
    24ce:	11 24       	eor	r1, r1
    24d0:	0b b6       	in	r0, 0x3b	; 59
    24d2:	0f 92       	push	r0
    24d4:	2f 93       	push	r18
    24d6:	8f 93       	push	r24
    24d8:	9f 93       	push	r25
    24da:	af 93       	push	r26
    24dc:	bf 93       	push	r27
    24de:	ef 93       	push	r30
    24e0:	ff 93       	push	r31
    24e2:	e0 91 bd 10 	lds	r30, 0x10BD	; 0x8010bd <_ser_handle+0x4>
    24e6:	f0 91 be 10 	lds	r31, 0x10BE	; 0x8010be <_ser_handle+0x5>
    24ea:	30 97       	sbiw	r30, 0x00	; 0
    24ec:	b9 f0       	breq	.+46     	; 0x251c <__vector_52+0x56>
    24ee:	02 80       	ldd	r0, Z+2	; 0x02
    24f0:	f3 81       	ldd	r31, Z+3	; 0x03
    24f2:	e0 2d       	mov	r30, r0
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	98 17       	cp	r25, r24
    24fa:	b1 f0       	breq	.+44     	; 0x2528 <__vector_52+0x62>
    24fc:	92 81       	ldd	r25, Z+2	; 0x02
    24fe:	85 81       	ldd	r24, Z+5	; 0x05
    2500:	28 2f       	mov	r18, r24
    2502:	26 95       	lsr	r18
    2504:	29 23       	and	r18, r25
    2506:	a0 81       	ld	r26, Z
    2508:	b1 81       	ldd	r27, Z+1	; 0x01
    250a:	a2 0f       	add	r26, r18
    250c:	b1 1d       	adc	r27, r1
    250e:	2c 91       	ld	r18, X
    2510:	9f 5f       	subi	r25, 0xFF	; 255
    2512:	89 23       	and	r24, r25
    2514:	82 83       	std	Z+2, r24	; 0x02
    2516:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    251a:	0b c0       	rjmp	.+22     	; 0x2532 <__vector_52+0x6c>
    251c:	e1 ed       	ldi	r30, 0xD1	; 209
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	8f 7d       	andi	r24, 0xDF	; 223
    2524:	80 83       	st	Z, r24
    2526:	05 c0       	rjmp	.+10     	; 0x2532 <__vector_52+0x6c>
    2528:	e1 ed       	ldi	r30, 0xD1	; 209
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	8f 7d       	andi	r24, 0xDF	; 223
    2530:	80 83       	st	Z, r24
    2532:	ff 91       	pop	r31
    2534:	ef 91       	pop	r30
    2536:	bf 91       	pop	r27
    2538:	af 91       	pop	r26
    253a:	9f 91       	pop	r25
    253c:	8f 91       	pop	r24
    253e:	2f 91       	pop	r18
    2540:	0f 90       	pop	r0
    2542:	0b be       	out	0x3b, r0	; 59
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	0f 90       	pop	r0
    254a:	1f 90       	pop	r1
    254c:	18 95       	reti

0000254e <__vector_54>:
    254e:	1f 92       	push	r1
    2550:	0f 92       	push	r0
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	0f 92       	push	r0
    2556:	11 24       	eor	r1, r1
    2558:	0b b6       	in	r0, 0x3b	; 59
    255a:	0f 92       	push	r0
    255c:	2f 93       	push	r18
    255e:	3f 93       	push	r19
    2560:	4f 93       	push	r20
    2562:	5f 93       	push	r21
    2564:	6f 93       	push	r22
    2566:	7f 93       	push	r23
    2568:	8f 93       	push	r24
    256a:	9f 93       	push	r25
    256c:	af 93       	push	r26
    256e:	bf 93       	push	r27
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	ef 93       	push	r30
    2576:	ff 93       	push	r31
    2578:	a0 91 bf 10 	lds	r26, 0x10BF	; 0x8010bf <_ser_handle+0x6>
    257c:	b0 91 c0 10 	lds	r27, 0x10C0	; 0x8010c0 <_ser_handle+0x7>
    2580:	10 97       	sbiw	r26, 0x00	; 0
    2582:	11 f1       	breq	.+68     	; 0x25c8 <__vector_54+0x7a>
    2584:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2588:	14 96       	adiw	r26, 0x04	; 4
    258a:	ed 91       	ld	r30, X+
    258c:	fc 91       	ld	r31, X
    258e:	15 97       	sbiw	r26, 0x05	; 5
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	25 81       	ldd	r18, Z+5	; 0x05
    2596:	98 1b       	sub	r25, r24
    2598:	92 23       	and	r25, r18
    259a:	84 81       	ldd	r24, Z+4	; 0x04
    259c:	98 17       	cp	r25, r24
    259e:	61 f0       	breq	.+24     	; 0x25b8 <__vector_54+0x6a>
    25a0:	83 81       	ldd	r24, Z+3	; 0x03
    25a2:	26 95       	lsr	r18
    25a4:	28 23       	and	r18, r24
    25a6:	c0 81       	ld	r28, Z
    25a8:	d1 81       	ldd	r29, Z+1	; 0x01
    25aa:	c2 0f       	add	r28, r18
    25ac:	d1 1d       	adc	r29, r1
    25ae:	68 83       	st	Y, r22
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	95 81       	ldd	r25, Z+5	; 0x05
    25b4:	89 23       	and	r24, r25
    25b6:	83 83       	std	Z+3, r24	; 0x03
    25b8:	16 96       	adiw	r26, 0x06	; 6
    25ba:	ed 91       	ld	r30, X+
    25bc:	fc 91       	ld	r31, X
    25be:	17 97       	sbiw	r26, 0x07	; 7
    25c0:	30 97       	sbiw	r30, 0x00	; 0
    25c2:	11 f0       	breq	.+4      	; 0x25c8 <__vector_54+0x7a>
    25c4:	cd 01       	movw	r24, r26
    25c6:	19 95       	eicall
    25c8:	ff 91       	pop	r31
    25ca:	ef 91       	pop	r30
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	bf 91       	pop	r27
    25d2:	af 91       	pop	r26
    25d4:	9f 91       	pop	r25
    25d6:	8f 91       	pop	r24
    25d8:	7f 91       	pop	r23
    25da:	6f 91       	pop	r22
    25dc:	5f 91       	pop	r21
    25de:	4f 91       	pop	r20
    25e0:	3f 91       	pop	r19
    25e2:	2f 91       	pop	r18
    25e4:	0f 90       	pop	r0
    25e6:	0b be       	out	0x3b, r0	; 59
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	0f 90       	pop	r0
    25ee:	1f 90       	pop	r1
    25f0:	18 95       	reti

000025f2 <__vector_55>:
    25f2:	1f 92       	push	r1
    25f4:	0f 92       	push	r0
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	0f 92       	push	r0
    25fa:	11 24       	eor	r1, r1
    25fc:	0b b6       	in	r0, 0x3b	; 59
    25fe:	0f 92       	push	r0
    2600:	2f 93       	push	r18
    2602:	8f 93       	push	r24
    2604:	9f 93       	push	r25
    2606:	af 93       	push	r26
    2608:	bf 93       	push	r27
    260a:	ef 93       	push	r30
    260c:	ff 93       	push	r31
    260e:	e0 91 bf 10 	lds	r30, 0x10BF	; 0x8010bf <_ser_handle+0x6>
    2612:	f0 91 c0 10 	lds	r31, 0x10C0	; 0x8010c0 <_ser_handle+0x7>
    2616:	30 97       	sbiw	r30, 0x00	; 0
    2618:	b9 f0       	breq	.+46     	; 0x2648 <__vector_55+0x56>
    261a:	02 80       	ldd	r0, Z+2	; 0x02
    261c:	f3 81       	ldd	r31, Z+3	; 0x03
    261e:	e0 2d       	mov	r30, r0
    2620:	93 81       	ldd	r25, Z+3	; 0x03
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	98 17       	cp	r25, r24
    2626:	b1 f0       	breq	.+44     	; 0x2654 <__vector_55+0x62>
    2628:	92 81       	ldd	r25, Z+2	; 0x02
    262a:	85 81       	ldd	r24, Z+5	; 0x05
    262c:	28 2f       	mov	r18, r24
    262e:	26 95       	lsr	r18
    2630:	29 23       	and	r18, r25
    2632:	a0 81       	ld	r26, Z
    2634:	b1 81       	ldd	r27, Z+1	; 0x01
    2636:	a2 0f       	add	r26, r18
    2638:	b1 1d       	adc	r27, r1
    263a:	2c 91       	ld	r18, X
    263c:	9f 5f       	subi	r25, 0xFF	; 255
    263e:	89 23       	and	r24, r25
    2640:	82 83       	std	Z+2, r24	; 0x02
    2642:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2646:	0b c0       	rjmp	.+22     	; 0x265e <__vector_55+0x6c>
    2648:	e1 e3       	ldi	r30, 0x31	; 49
    264a:	f1 e0       	ldi	r31, 0x01	; 1
    264c:	80 81       	ld	r24, Z
    264e:	8f 7d       	andi	r24, 0xDF	; 223
    2650:	80 83       	st	Z, r24
    2652:	05 c0       	rjmp	.+10     	; 0x265e <__vector_55+0x6c>
    2654:	e1 e3       	ldi	r30, 0x31	; 49
    2656:	f1 e0       	ldi	r31, 0x01	; 1
    2658:	80 81       	ld	r24, Z
    265a:	8f 7d       	andi	r24, 0xDF	; 223
    265c:	80 83       	st	Z, r24
    265e:	ff 91       	pop	r31
    2660:	ef 91       	pop	r30
    2662:	bf 91       	pop	r27
    2664:	af 91       	pop	r26
    2666:	9f 91       	pop	r25
    2668:	8f 91       	pop	r24
    266a:	2f 91       	pop	r18
    266c:	0f 90       	pop	r0
    266e:	0b be       	out	0x3b, r0	; 59
    2670:	0f 90       	pop	r0
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	0f 90       	pop	r0
    2676:	1f 90       	pop	r1
    2678:	18 95       	reti

0000267a <__tablejump2__>:
    267a:	ee 0f       	add	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	88 1f       	adc	r24, r24
    2680:	8b bf       	out	0x3b, r24	; 59
    2682:	07 90       	elpm	r0, Z+
    2684:	f6 91       	elpm	r31, Z
    2686:	e0 2d       	mov	r30, r0
    2688:	19 94       	eijmp

0000268a <memcpy>:
    268a:	fb 01       	movw	r30, r22
    268c:	dc 01       	movw	r26, r24
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <memcpy+0xa>
    2690:	01 90       	ld	r0, Z+
    2692:	0d 92       	st	X+, r0
    2694:	41 50       	subi	r20, 0x01	; 1
    2696:	50 40       	sbci	r21, 0x00	; 0
    2698:	d8 f7       	brcc	.-10     	; 0x2690 <memcpy+0x6>
    269a:	08 95       	ret

0000269c <memset>:
    269c:	dc 01       	movw	r26, r24
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <memset+0x6>
    26a0:	6d 93       	st	X+, r22
    26a2:	41 50       	subi	r20, 0x01	; 1
    26a4:	50 40       	sbci	r21, 0x00	; 0
    26a6:	e0 f7       	brcc	.-8      	; 0x26a0 <memset+0x4>
    26a8:	08 95       	ret

000026aa <_exit>:
    26aa:	f8 94       	cli

000026ac <__stop_program>:
    26ac:	ff cf       	rjmp	.-2      	; 0x26ac <__stop_program>
